<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王昶（chang三声）庆的博客</title>
  
  <subtitle>web开发尝试者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="yikewawa.gitbub.io/"/>
  <updated>2019-03-21T04:41:52.191Z</updated>
  <id>yikewawa.gitbub.io/</id>
  
  <author>
    <name>yikeNeal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react and vue summary</title>
    <link href="yikewawa.gitbub.io/2019/03/21/react-and-vue-summary/"/>
    <id>yikewawa.gitbub.io/2019/03/21/react-and-vue-summary/</id>
    <published>2019-03-21T04:41:52.191Z</published>
    <updated>2019-03-21T04:41:52.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>俗话说的好，好记忆不如烂键盘；所以博主就把自己理解的或者别人总结的东西放到这里</p></blockquote><a id="more"></a><h2 id="React理解总结笔记"><a href="#React理解总结笔记" class="headerlink" title="React理解总结笔记"></a>React理解总结笔记</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>1、自定义组件名首字母必须大写</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="如何编写组件"><a href="#如何编写组件" class="headerlink" title="如何编写组件"></a>如何编写组件</h4><p>1、ES5编写JSX</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;                                                </div><div class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                                                                  </div><div class="line">        <span class="keyword">return</span>(                                                                               </div><div class="line">            &lt;div&gt;</div><div class="line">                Hello, world!</div><div class="line">            &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        )                                                                                       </span></div><div class="line"><span class="regexp">    &#125;                                                                                          </span></div><div class="line"><span class="regexp">&#125;)</span></div></pre></td></tr></table></figure><p>2、ES6语法编写JSX</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render () &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                Hello, world!</div><div class="line">            &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        )</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>1、构造函数</p><blockquote><p>构造函数，在创建组件的时候调用一次。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props, context)</div></pre></td></tr></table></figure><p>2、渲染前<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentWillMount()</div></pre></td></tr></table></figure></p><p>3、渲染完成后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentDidMount()</div></pre></td></tr></table></figure></p><p>4、组件挂载之后加载<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentWillReceiveProps(nextProps)</div></pre></td></tr></table></figure></p><p>5、组件状态被修改前<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentWillUpdate(nextProps, nextState)</div></pre></td></tr></table></figure></p><p>6、组件被修改完成之后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentDidUpdate()</div></pre></td></tr></table></figure></p><p>7、组件被销毁前<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentWillUnmount()</div></pre></td></tr></table></figure></p><p>8、是否需要渲染</p><blockquote><p>组件挂载之后，每次调用setState后都会调用shouldComponentUpdate判断是否需要重新渲染组件。<br>默认返回true，需要重新render。在比较复杂的应用里，有一些数据的改变并不影响界面展示，可以在这里做判断，优化渲染效率。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool shouldComponentUpdate(nextProps, nextState)</div></pre></td></tr></table></figure><h3 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h3><blockquote><p>在react中，触发render的有4条路径。</p></blockquote><p>1、首次渲染Initial Render<br>2、调用this.setState （并不是一次setState会触发一次render，React可能会合并操作，再一次性进行render）<br>3、父组件发生更新（一般就是props发生改变，但是就算props没有改变或者父子组件之间没有数据交换也会触发render）<br>4、调用this.forceUpdate</p><p>如图：</p><p><img src="/img/react-and-vue-summary/reactzq.png" alt="image"></p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote><p>个人认为，state一般存在于父组件或者自身需要即时获取用户状态的情况下使用，state在组件中是越少越好</p></blockquote><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><blockquote><p>个人认为，props一般存在于子组件，父组件的state数据变化传递给子组件作为props来更新视图，而且不可被改变</p></blockquote><h3 id="state和props的关系"><a href="#state和props的关系" class="headerlink" title="state和props的关系"></a>state和props的关系</h3><blockquote><p>Props and state are related. The state of one component will often become the props of a child component.<br>Props are passed to the child within the render method of the parent as the second argument to React.createElement() or, if you’re using JSX, the more familiar tag attributes.<br>属性和状态是有联系的。通常，一个组件的state会变成另一个组件的props,子组件的render函数会被props传递给<code>React.createElement()</code>的第二个参数，或者你使用jsx会变成其他属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;MyChild name=&#123;<span class="keyword">this</span>.state.childsName&#125; /&gt;</div></pre></td></tr></table></figure><blockquote><p>The parent’s state value of childsName becomes the child’s this.props.name. From the child’s perspective, the name prop is immutable. If it needs to be changed, the parent should &gt; just change its internal state:<br>父组件的<code>state.childsName</code>会变成子组件的属性<code>this.props.name</code>,子组件的props是不能被改变的。如果需要改变，父组件需要改变它的内部state</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">childsName</span>: <span class="string">'New name'</span> &#125;);</div></pre></td></tr></table></figure><blockquote><p>and React will propagate it to the child for you. A natural follow-on question is: what if the child needs to change its name prop? This is usually done through child events and  &gt; parent callbacks. The child might expose an event called, for example, onNameChanged. The parent would then subscribe to the event by passing a callback handler.<br>然后React会传递给子组件给用户，那么问题来了：子组件如何改变属性状态？这通常需要通过子组件的事件和父组件的回调来完成。子组件需要暴露一个事件名称，举个例子，父组件将会订阅回调事件<code>onNameChanged</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;MyChild name=&#123;<span class="keyword">this</span>.state.childsName&#125; onNameChanged=&#123;<span class="keyword">this</span>.handleName&#125; /&gt;</div></pre></td></tr></table></figure><blockquote><p>The child would pass its requested new name as an argument to the event callback by calling, e.g.,  this.props.onNameChanged(‘New name’), and the parent would use the name in the &gt; event handler to update its state.<br>子组件将会通过请求一个新的名称作为参数提交给事件回调，举个例子<code>this.props.onNameChanged(&#39;New name&#39;)</code>，在父组件将会用这个新的名称来更新state</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">handleName: <span class="function"><span class="keyword">function</span>(<span class="params">newName</span>) </span>&#123;</div><div class="line">   <span class="keyword">this</span>.setState(&#123; <span class="attr">childsName</span>: newName &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Vue理解总结笔记"><a href="#Vue理解总结笔记" class="headerlink" title="Vue理解总结笔记"></a>Vue理解总结笔记</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;俗话说的好，好记忆不如烂键盘；所以博主就把自己理解的或者别人总结的东西放到这里&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Web" scheme="yikewawa.gitbub.io/categories/Web/"/>
    
    
      <category term="React" scheme="yikewawa.gitbub.io/tags/React/"/>
    
      <category term="Vue" scheme="yikewawa.gitbub.io/tags/Vue/"/>
    
      <category term="Webpack" scheme="yikewawa.gitbub.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>how-display-contents-works</title>
    <link href="yikewawa.gitbub.io/2018/03/29/how-display-contents-works/"/>
    <id>yikewawa.gitbub.io/2018/03/29/how-display-contents-works/</id>
    <published>2018-03-29T09:33:05.000Z</published>
    <updated>2019-03-21T04:41:52.188Z</updated>
    
    <content type="html"><![CDATA[<p>As I frequently mention,<a href="https://bitsofco.de/controlling-the-box-model/" target="_blank" rel="external"> every element in the document tree is a rectangular box</a>。Broadly speaking, this “rectangular box” consists of two sections. First we have the actual box, which consists of the border, padding, and margin areas. Second, we have the <code>contents</code>of the box; the content area.</p><p><img src="/img/how-display-contents-works/Group-3.png" alt="image"></p><a id="more"></a><p>With the CSS <code>display</code> property, we can control different things about how this box and its children are drawn on the page. We can have the box be placed within its siblings like text with <code>inline</code>. We can even trick the box into behaving like a table with table.</p><p>There are only two values for the <code>display</code> property which control whether an element defined in the markup will generate a box at all. The <code>none</code> value will result in neither the box or its <code>contents</code>being drawn on the page. The newly specced <code>contents</code>value, on the other hand, will result in the <code>contents</code>of the box being drawn as normal, but the surrounding box being omitted entirely.</p><h1 id="What-happens-when-you-use-display-contents"><a href="#What-happens-when-you-use-display-contents" class="headerlink" title="What happens when you use display: contents?"></a>What happens when you use display: contents?</h1><p>The easiest way to understand what happens when <code>display: contents</code> is used is to imagine the element’s opening and closing tags being omitted from the markup. In the specification, it states -</p><blockquote><p>For the purposes of box generation and layout, the element must be treated as if it had been replaced in the element tree by its contents</p></blockquote><p>Let’s take, for example, the following markup -</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></div><div class="line">  I’m some content</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>I’m some inner content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>And the following styles -</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.outer</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid lightcoral;</div><div class="line">  <span class="attribute">background-color</span>: lightpink;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.inner</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ffdb3a</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Typically, this is how we would expect the elements to be drawn on the page -</p><p><img src="/img/how-display-contents-works/1.png" alt="image"></p><p>However, if we add <code>display: contents</code> to the .outer element, this is how it is displayed -</p><p><img src="/img/how-display-contents-works/2.png" alt="image"></p><p>Visually speaking, the above result is exactly the same as what we would expect if the markup was written without the opening and closing tags of the outer element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I’m some content</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>I’m some inner content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="What-about…"><a href="#What-about…" class="headerlink" title="What about…?"></a>What about…?</h1><p>This CSS rule, although seemingly straightforward, has quite a few edge cases and specific behaviours to take note of. We have to remember that the <code>display: contents</code> rule only affects the box being visually drawn on the page; it does not affect the markup within the document.</p><h1 id="What-about-the-element’s-attributes"><a href="#What-about-the-element’s-attributes" class="headerlink" title="What about the element’s attributes?"></a>What about the element’s attributes?</h1><p>If the element is effectively replaced by its contents, what does that mean for any attributes applied to it? Since this replacement is, for the most part, visual only, we can actually still select, target, and interact with the element using its attributes.</p><p>We can still target the element by its ID by, for example, making a reference to it using aria-labelledby.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"label"</span> <span class="attr">style</span>=<span class="string">"`display: contents `;"</span>&gt;</span>Label here!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-labelledby</span>=<span class="string">"label"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><p>However, the one thing I have found that doesn’t work properly is that we can no longer navigate to the element using a fragment identifier.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">style</span>=<span class="string">"display: contents ;"</span>&gt;</span>Target Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">window</span>.location.hash = <span class="string">"target"</span>;</span></div><div class="line"><span class="javascript">  <span class="comment">// =&gt; Nothing happens</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="What-about-JavaScript-events"><a href="#What-about-JavaScript-events" class="headerlink" title="What about JavaScript events?"></a>What about JavaScript events?</h1><p>As we have just covered, we can still target an element with <code>display: contents</code> applied to it. In fact, we can target an element with <code>display: none</code> applied, but the event will never trigger because we cannot interact with the element. However, since the contents of an element with <code>display: contents</code> are still visible, we can interact with the element through its contents.</p><p>If we set an event listener for a click on the element, for example, and log the value of this, we will still get the outer element because it still exists in the document.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span>I’m some content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">".outer"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></div><div class="line"><span class="xml">    // =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="What-about-pseudo-elements"><a href="#What-about-pseudo-elements" class="headerlink" title="What about pseudo-elements?"></a>What about pseudo-elements?</h1><p>The pseudo-elements of an element with <code>display: contents</code> are considered to be part of its children, so are displayed as normal.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">  .outer &#123; `display: contents `; &#125;</span></div><div class="line"><span class="css">  <span class="selector-class">.outer</span><span class="selector-pseudo">::before</span> &#123; <span class="attribute">content</span>: <span class="string">"Before"</span> &#125;</span></div><div class="line"><span class="css">  <span class="selector-class">.outer</span><span class="selector-pseudo">::after</span> &#123; <span class="attribute">content</span>: <span class="string">"After"</span> &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span>I’m some content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>The above markup will generate the following result -</p><p><img src="/img/how-display-contents-works/3.png" alt="image"></p><h1 id="What-about-form-elements-images-and-other-replaced-elements"><a href="#What-about-form-elements-images-and-other-replaced-elements" class="headerlink" title="What about form elements, images and other replaced elements?"></a>What about form elements, images and other replaced elements?</h1><p>Replaced elements and some form elements have a different behaviour when <code>display: contents</code> is applied to them.</p><h2 id="Replaced-elements"><a href="#Replaced-elements" class="headerlink" title="Replaced elements"></a>Replaced elements</h2><p>Replaced elements are elements, such as images, whose appearance and “boxes” are controlled by an external resource. Attempting to remove the box for elements like this doesn’t really make sense because it isn’t entirely clear what the “box” is. For these elements, <code>display: contents</code> functions exactly like <code>display: none</code>. The entire box and contents of the element are not drawn on the page at all.</p><h2 id="Form-elements"><a href="#Form-elements" class="headerlink" title="Form elements"></a>Form elements</h2><p>For many form elements, they are not composed of a single “box”. They look like that from the perspective of us, the web page authors. But under the hood, they are made up of several smaller elements. Similarly to the replaced elements, it doesn’t make sense to remove the box, because there isn’t one box. And so, for form elements like <code>&lt;select&gt;</code>, <code>&lt;input&gt;,</code> and <code>&lt;textarea&gt;</code>, <code>display: contents</code> functions exactly like <code>display: none</code>.</p><p>See the <a href="https://www.w3.org/TR/css-display-3/#unbox-html" target="_blank" rel="external">full list of elements that display: contents works differenly for</a></p><h2 id="What-about-buttons-and-links"><a href="#What-about-buttons-and-links" class="headerlink" title="What about buttons and links?"></a>What about buttons and links?</h2><p>Both the <code>&lt;button&gt;</code> and <code>&lt;a&gt;</code> elements do not have any special behaviour when it comes to display: contents. However, it is useful to know how this rule affects them because it may not be immediately obvious.</p><h2 id="Buttons"><a href="#Buttons" class="headerlink" title="Buttons"></a>Buttons</h2><p>Buttons are not one of the form elements which are composed of other boxes. Therefore, display: contents will just remove the surrounding box, leaving the content of the button displayed. If used within a form, clicking the button will still attempt to submit the form and, as we have covered, any event listeners on the button will function normally.</p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p>For links, the same applies in that the surrounding box is visually removed, leaving the contents of the link behind. Since attributes aren’t generally affected by this CSS rule, the link will still function properly and can be used to navigate as normal.</p><h2 id="Why-is-display-contents-useful"><a href="#Why-is-display-contents-useful" class="headerlink" title="Why is display: contents useful?"></a>Why is display: contents useful?</h2><p>In the past, we have had to lay out our HTML in a way that works both semantically, and for the purposes of styling with CSS. This has led to cases where we either have too many unnecessary elements for wrapping purposes, or too few elements to enable direct sibling styling. The latter has become particularly pertinent with the introduction of CSS Grid Layout which, for now at least, needs to work with direct sibling elements.</p><p>Let’s take, for example, this layout -</p><p><img src="/img/how-display-contents-works/4.png" alt="image"></p><p>We have two “cards” placed next to each other, each with a heading, a pargraph, and a footer. What we want is for each of the sections within each card to be the same height, regardless of the content of each section (e.g. the first card has only a 1-line whereas the third card has a 3-line heading, but the first card heading section height should match the third).</p><p>We could achieve this layout using CSS Grid, but we would need all the elements within each “card” to be direct siblings of each other. So, we may have to layout our HTML like this -</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    </div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a really really really super duper loooong heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>And we could apply the following styles -</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grid</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-auto-flow</span>: column;</div><div class="line">  <span class="attribute">grid-template-rows</span>: auto <span class="number">1</span>fr auto;</div><div class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(2, 1fr);</div><div class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Although this is not exactly an incorrect way to structure this document, it probably makes more sense to group each “card” within an <code>&lt;article&gt;</code> element. This is where <code>display: contents</code> comes in. We can have the best of both worlds here - by laying out our markup in a way that makes sense semantically, but having our CSS act in a way that makes sense layout-wise.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">style</span>=<span class="string">"display: contents;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">style</span>=<span class="string">"display: contents;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a really really really super duper loooong heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>With the same CSS as above, we can achieve the layout we want.</p><h2 id="Using-display-contents"><a href="#Using-display-contents" class="headerlink" title="Using display: contents"></a>Using display: contents</h2><p>At the time of writing, display: contents is only supported in two major browsers, with support arriving soon in many others.</p><iframe src="//caniuse.bitsofco.de/embed/index.html?feat=css-display-contents&amp;periods=future_2,future_1,current,past_1" frameborder="0" width="100%" height="461px"></iframe><p>Because of this, this feature should still currently be considered a progressive enhancement, and an appropriate fallback should be used.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">article</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">200px</span> <span class="number">1</span>fr auto; <span class="comment">/* e.g. Use a fixed height for the header */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">supports</span> (display: contents) &#123;</div><div class="line">  <span class="selector-tag">article</span> &#123; <span class="attribute">display</span>: contents; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As I frequently mention,&lt;a href=&quot;https://bitsofco.de/controlling-the-box-model/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; every element in the document tree is a rectangular box&lt;/a&gt;。Broadly speaking, this “rectangular box” consists of two sections. First we have the actual box, which consists of the border, padding, and margin areas. Second, we have the &lt;code&gt;contents&lt;/code&gt;of the box; the content area.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/how-display-contents-works/Group-3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>这七种迹象，暗示你的生活正慢慢变好</title>
    <link href="yikewawa.gitbub.io/2017/12/08/%E8%BF%99%E4%B8%83%E7%A7%8D%E8%BF%B9%E8%B1%A1%EF%BC%8C%E6%9A%97%E7%A4%BA%E4%BD%A0%E7%9A%84%E7%94%9F%E6%B4%BB%E6%AD%A3%E6%85%A2%E6%85%A2%E5%8F%98%E5%A5%BD/"/>
    <id>yikewawa.gitbub.io/2017/12/08/这七种迹象，暗示你的生活正慢慢变好/</id>
    <published>2017-12-08T09:24:20.000Z</published>
    <updated>2019-03-21T04:41:52.194Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6126137-6ed29bc182444982?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p><p>转眼，离2017年的结束只有24天。</p><a id="more"></a><p>有人调侃：“<strong>我2018年的新计划，就是完成2017年计划的、一定要做完的、2016年没做完的事情。</strong>”</p><p>年底事务繁忙，不少人因为忙得底朝天而陷入无尽焦虑：新的一年会更好吗？</p><p>《这个杀手不太冷》里，玛蒂达问，人生总是那么痛苦吗？还是只有小时候这样。</p><p>里昂回答说，总是如此。</p><p>真实的人生其实不尽然，看起来人人都离不开烦恼的旋涡，但一些迹象已经表明，生活正在慢慢变好。</p><p>△</p><h2 id="一、学会规划时间"><a href="#一、学会规划时间" class="headerlink" title="一、学会规划时间"></a>一、学会规划时间</h2><p>有些发明，初衷是为了节省时间提高效率，最后却占用了越来越多的时间。</p><p>比如购物APP，比如资讯APP。</p><p>拿起手机打开购物软件逛一逛，刷刷微博看看新鲜事，10点上床准备睡觉，结果刷到了半夜。</p><p>某宝提供的物品太多，你陷入选择困难症。微博娱乐信息太多，明星离婚出轨的消息看不够。</p><p><strong>讯息接受超过一定程度，人就容易陷入焦虑。</strong></p><p>花了太多时间在这些海量信息中流连忘返，产生了一种每天都能从中获取很多知识的错觉。</p><p>某天醒来才发现，其实看过的东西，你一件也想不起来。</p><p><img src="http://upload-images.jianshu.io/upload_images/6126137-ea4bcc9ff5e6dd0b.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="image"></p><p><strong>无意识地刷手机，不过是为了转移注意力，逃避眼前要做的事。但最终，人还是要为那些悄悄流走的时间买单。</strong></p><p>想让生活慢慢变好，必须尽量去摆脱那些无聊的娱乐八卦。</p><p>知乎上有个话题：“是什么一下子结束了你的长期拖延？”</p><p>有这样一个匿名回答：</p><p>“突然有一天睡梦中惊醒，今年我已经30岁了，如果我再不努力，这辈子也就这样了。以前因为不懂事，变成了现在的我，过着现在的生活。但是如果因为以前的不懂事，我的后半辈子都得为此买单，我不甘心。”</p><p>有意识地控制自己，不再漫无目地耗时间，说明你已经开始学会控制自己，规划时间。</p><p>△</p><h2 id="二、找准了前进方向"><a href="#二、找准了前进方向" class="headerlink" title="二、找准了前进方向"></a>二、找准了前进方向</h2><p>“不喜欢眼前的，但又不知道自己到底喜欢什么”，是最具普遍性的迷茫。</p><p>许多人思考了许多年，还是没有想通透，于是一边寻找，一边妥协，将就了自己。</p><p>看《奇葩大会》的时候，有位叫刘楠的CEO让人印象深刻。</p><p>她职场生涯的前半段，和许多人类似：名校毕业，进了外企，做了白领。</p><p>但刘楠感觉自己不快乐。</p><p>“天天做PPT，做汇报”，她深知自己不喜欢这种流程化的工作。每天重复性地劳动，让她感到恐慌，于是她辞职了。</p><p>生完孩子后，她开始创业。</p><p>“为什么我要创业？我希望生活在自己想生活的世界里，但是可能等不及别人来创造这个世界，所以我就自己去做这个世界。“</p><p>她清楚自己不想要什么，在还有勇气的时候，敢以“试错”的方式来确定人生。</p><p><img src="http://upload-images.jianshu.io/upload_images/6126137-67f282b38fed02f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p><p>无印良品的社长松井忠三曾说：“面对工作，若只像少年棒球队的孩子一样，笼统地抱持着我要努力的心态，是最糟糕的。”</p><p><strong>因为努力的前提是，你已经找准了方向。</strong></p><p>之所以犹豫，如果不是因为不勇敢，就是因为还不知道自己想要什么。</p><p>所以当有一天面对选择时，你不再踟蹰不定，那一定是生活变好的信号。</p><p>△</p><h2 id="三、懂得照顾自己"><a href="#三、懂得照顾自己" class="headerlink" title="三、懂得照顾自己"></a>三、懂得照顾自己</h2><p>近年来，都市年轻人过劳猝死的新闻层出不穷。</p><p>很多人彻夜不眠地努力，痴痴地相信“没有经历通宵的奋斗不是人生”，以“见过凌晨四点的公司”为荣。</p><p>数据显示，白领阶层中工作时间超过8小时的高达60%，10小时以上的占25%，超过12小时的占15%，而他们的每周平均锻炼时间不超过3小时。</p><p><strong>工作都很拼，会好好照顾自己的没几个。</strong></p><p>不吃早饭，没时间就啃个面包，外卖方便面是首选。</p><p>但工作努力和照顾自己，不完全冲突。</p><p>今年9月，网友@卡卡Prancil 在微博分享自己的经历。</p><p>9月2日的早晨，博主在毫无预兆的情况下后脑勺剧烈疼痛，并冷汗直流。</p><p>被送往医院之后，ct扫描结果显示博主脑内多处出血。之后9天，他每天打20多瓶药，止血、吸收水肿、冲脑，几乎吃什么都会引起呕吐，吐到黄胆水都出来。</p><p><img src="http://upload-images.jianshu.io/upload_images/6126137-e73f15fa9e0b6939.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/588" alt="image"></p><p>博主在自述最后，给出了3点忠告：</p><p>1.一定要规律作息，朝六晚十。我长期熬夜到1点多才睡，第二天又早早起来工作。熬夜的伤害其实长期潜伏在你身体里，你永远都不知道什么时候会爆发。</p><p>2.调节工作/学习压力。可能因为在工作上越来越给力，收入越来越高，所以越来越忙。我想到的也只是尽力去做好，终于把身体给拖垮了。大家一定要权衡，量力而行。</p><p>3.一定要多多运动，不能老是躺着。医生说我的血管太脆弱了，没有弹性，长期缺乏运动。无论是怎么样的运动，一定要动起来。</p><p>算起来，坚持这些，并不需要花费太多时间。坚持按点吃饭，每天锻炼身体，清晨的粥总比深夜的酒好喝。</p><p><strong>身体不行的人，是走不到最后的。</strong></p><p>△</p><h2 id="四、对生活的人和事更加包容"><a href="#四、对生活的人和事更加包容" class="headerlink" title="四、对生活的人和事更加包容"></a>四、对生活的人和事更加包容</h2><p>活到一定岁数，渐渐发现，人人都有自己的难处。</p><p>韩剧《请回答1988》里，德善奶奶去世后，德善看到爸爸和姑姑们没有流一滴眼泪，觉得大人们太冷血。直到所有人散场后，她看到爸爸和姑姑们放声大哭。</p><p>成年人那些真心的难过，都是背着人群偷偷流泪。</p><p><strong>很多时候，片面的批评与责备，是不理解导致的不宽容。</strong></p><p>“一个人真正成熟的标志，就是发觉可以责怪的人越来越少。理由很简单，人人都有自己的难处，而你，不一定懂得他们的生活。”作家亦舒说。</p><p>年初，有网友在微博中晒出了一张外卖订单，备注内容是：“送餐小哥，我没那么着急吃饭，送餐路上请安全第一。如果超时可提前按已送达，或与我联系。辛苦了，谢谢你……”</p><p>记者采访这位网友时，她表示，看了“外卖小哥送餐超时，电梯里急哭”的视频后，她很有感触。</p><p>“如果不是因为职业态度问题，外卖小哥送餐迟到是可以体谅的。因为各个外卖平台都有详细的送餐规则，确实也没必要破坏，毕竟无规矩不成方圆。但是，我愿意在力所能及的范围内给送餐员一些方便和温暖。”</p><p>越包容，自己的生活越好过，越计较，自己的空间就越小。<strong>苛责怨恨别人，往往会使自己失去了快乐。</strong></p><p>与其说包容是给别人尊重和理解，不如说，也是为了自己顺心。</p><p>△</p><h2 id="五、有一两样自己的爱好"><a href="#五、有一两样自己的爱好" class="headerlink" title="五、有一两样自己的爱好"></a>五、有一两样自己的爱好</h2><p><strong>无论多忙，年纪多大，依然葆有对生活的热爱和探索欲。</strong></p><p>在重庆标志性建筑国泰艺术中心，曾举办过一场大提琴演奏会。</p><p>这场演奏会很特别，因为台上的演奏员一半以上都不是专业的大提琴演奏者，她们有不同的职业：警察、设计师、会计、记者、画家、全职主妇……</p><p>“我的第一个学员是一名警花，当她找到我时，我半晌没有回过神来，她的工作不是和大提琴风马牛不相及吗？”大提琴老师说，“但这名学员执意要学，警察的工作纪律性很强，强度也大，学员说，只要她一坐下来，搭弓拉弦，她觉得心一下子静了，整个纷扰世界都在琴声之外。”</p><p>这些大提琴爱好者们，在原本非常忙碌的工作生活中，靠着一股子热爱和学习欲，把兴趣变成了一项技能。</p><p>有人说，自己好像对所有事儿都提不起兴趣。</p><p><strong>问题的关键或许在于，过于追求事物带来的成就感，或者追求快速的成功。</strong></p><p>更好的解决方法是，学会享受做这件事的过程中，带给你的愉悦感和活力。</p><p>对甜点感兴趣，就去买烤箱买黄油买馅料，再买本精致的食谱；对潜水感兴趣，可以趁着假期去海边，试着考个潜水证；对摄影感兴趣，就多带着相机出去，走走拍拍。</p><p>最重要的，不是烤出一个多么美味的蛋糕，或者成为潜水专家、摄影师，而是挖掘自己的兴趣，让日子变得快乐充实。</p><p>△</p><h2 id="六、有一两个要好的朋友"><a href="#六、有一两个要好的朋友" class="headerlink" title="六、有一两个要好的朋友"></a>六、有一两个要好的朋友</h2><p>美剧《老友记》还有个名字叫“六人行”，只有六个人，彼此交好。</p><p>他们也想过寻找新朋友，但相处得都不顺利。</p><p><strong>朋友不用太多，知己一二就好。</strong></p><p>穿梭于酒桌饭局的酒肉兄弟，朋友圈从不走心的点赞之交，让人愈发觉得一段纯粹的友谊是人生的确幸。</p><p>在《我们的友谊，最终死在了朋友圈》一文后台，有读者谈到了她和好朋友之间的故事：</p><p>和闺蜜两人都在北京打拼，一个在北五环，一个在南四环，相隔太远，工作太忙，所以见面不多。那天夜晚北京大雪，她失恋了，发了条朋友圈，没想到闺蜜在深夜冒着大雪，带着热腾腾的馄饨过来安慰她，照顾她。</p><p>“那一瞬间，觉得有这样的朋友，有什么槛儿是过不去的呢。”</p><p><img src="http://upload-images.jianshu.io/upload_images/6126137-b91c2ba5e8db6c40.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/556" alt="image"></p><p>就如同亦舒说的：“那种难得的朋友。我成功，她不嫉妒。我委靡，她不轻视。人生得一知己足矣。”</p><p>有这样的兄弟闺蜜，缺钱，说一声，借你；喝酒，打个电话，陪你。</p><p><strong>也不用在彼此面前逞强，不用担心因为长期不联系感情会变淡。</strong></p><p>他们的存在，让你就算在人生低谷，也依然相信一切都会慢慢变好。</p><p>△</p><h2 id="七、不再过分攀比"><a href="#七、不再过分攀比" class="headerlink" title="七、不再过分攀比"></a>七、不再过分攀比</h2><p>以前总羡慕别人过得有多好，总是追着别人跑，跑着跑着把自己跑丢了。</p><p>68岁退休老教授在《牛蛙之殇》一文中，讲了他在研究所为祖国的科研事业辛苦了一辈子，本以为退休后可以含饴弄孙，却因为孙子的教育问题遭遇了“滑铁卢”。</p><p>小孙子从幼儿园开始，就被安排去上昂贵又严格的私立幼儿园，只为保证他从小有一口流利的英语，能在未来的入学面试时保有竞争力，读到最好的小学。</p><p>但孙子落榜了。从此，教授一家陷入了入学失败的痛苦深渊。</p><p>因为邻居家的孩子都顺利进入“名校”，原本在邻里之间较为优越的教授家，变得矮人一头。</p><p>为了争口气，孩子他妈想要孩子晚一年上学，明年再考一次。</p><p><strong>人的一生如同一场战役，不到闭上眼睛那一天，炮火不会终结。</strong></p><p>身心俱疲就为了处处超越别人，如同田忌赛马，眼里只有自己的下等马和对方的上等马。但实际上，你也有长处，对方也有短板。</p><p>躺着刷朋友圈，看到不如自己漂亮能干的同学天天在国外旅游度假，不由感叹：“嫁个有钱老公真好！”于是跟丈夫一顿大吵，厉声埋怨；</p><p>前任找到了新女友，于是不停地刷微博和朋友圈，不想看又忍不住，经常一刷就是好几个小时，啥也没干成。</p><p>窥探别人的生活、别人的思想，然后与自己作比较，满眼是自己与他人的差距，无法感到快乐。</p><p><strong>但别人的生活终究是别人的，与其在别人身上浪费不必要的时间，还不如先把自己的过好。</strong></p><p>把分散在牛人身上的目光，多聚焦在自己身上，每天都进步一点点，足够了。</p><p><strong>改变每天常在</strong></p><p>最近看《演员的诞生》，凌潇肃和蓝盈莹的表演非常亮眼，两人都深得评委认可。</p><p>但当很多专业评审更倾向于凌潇肃时，章子怡把关键的一票投给了蓝盈莹，原因是凌潇肃是80年生人，蓝盈莹整整小了他十岁。</p><p><strong>“十年有十年的经验。”她说。</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/6126137-4191805408e20617?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p><p>言外之意，每大一岁，都会给一个人带来经历和成长。时间流逝无痕迹，又把成长深深刻在你的骨子里。</p><p><strong>现在的自己，如果和一年前的自己有些许不同，那过去的日子就算没白过。</strong></p><p>经常听到有人问：“有没有什么事，彻底改变了你的一生？”</p><p>很多人会提供很多惊心动魄的回答，仿佛就是那个电光火石的瞬间，彻底改造了自己。</p><p>但其实，生命里的每一件琐细之事都将作用于我。昨日种种，今日结果；今日所行，明日所得。</p><p><strong>吃饱了，是因为吃了三个馒头，而不是第三个馒头。压死骆驼的是所有的稻草，不是最后一根。</strong></p><p>同样，让生活越来越好的，也不会是某个瞬间，而是蛰伏在平淡中的每一个日常。</p><p>愿你2018年的生活越来越好，愿2018年槽值仍旧与你相伴。</p><blockquote><p>作者：槽值</p><p>链接：<a href="http://www.jianshu.com/p/cc5fa0308b92" target="_blank" rel="external">http://www.jianshu.com/p/cc5fa0308b92</a></p><p>來源：简书</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6126137-6ed29bc182444982?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;转眼，离2017年的结束只有24天。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="yikewawa.gitbub.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>jquery-wechat-sdk-api</title>
    <link href="yikewawa.gitbub.io/2017/11/15/jquery-wechat-sdk-api/"/>
    <id>yikewawa.gitbub.io/2017/11/15/jquery-wechat-sdk-api/</id>
    <published>2017-11-15T14:31:25.000Z</published>
    <updated>2019-03-21T04:41:52.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖模块"><a href="#依赖模块" class="headerlink" title="依赖模块"></a>依赖模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install jqyery</div><div class="line"></div><div class="line">$ npm install weixin-js-sdk</div></pre></td></tr></table></figure><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><strong><em>一个基于<code>jquery</code>的兼容AMD、CMD、Commandjs的<a href="https://www.npmjs.com/package/jquery_wechat_sdk" target="_blank" rel="external">模块包</a>，目的在于帮助微信开发者更好的更方便的使用微信里面的api。</em></strong></p></blockquote><a id="more"></a><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="简单加载"><a href="#简单加载" class="headerlink" title="简单加载"></a>简单加载</h3><p>导入资源</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.0.0.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span></span></div><div class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">"sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g="</span></span></div><div class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://blog.xulayen.com/cdn/jquery_wechat_sdk.1.4.9.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log($.WeChart(&#123;</span></div><div class="line"><span class="javascript">                appId: <span class="string">'your appid'</span>,</span></div><div class="line"><span class="javascript">                timestamp: <span class="string">'your timestamp'</span>,</span></div><div class="line"><span class="javascript">                nonceStr: <span class="string">'your nonceStr'</span>,</span></div><div class="line"><span class="javascript">                signature: <span class="string">'your signature '</span>,</span></div><div class="line"><span class="javascript">                access_token:<span class="string">'your access_token'</span>,</span></div><div class="line"><span class="javascript">                debug:<span class="literal">true</span></span></div><div class="line"><span class="undefined">            &#125;).InitWeChat());</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="1、调取api地址远程获取"><a href="#1、调取api地址远程获取" class="headerlink" title="1、调取api地址远程获取"></a>1、调取api地址远程获取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> _w = <span class="built_in">require</span>(<span class="string">'jquery_wechat_sdk'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> params=&#123;</div><div class="line">    api:<span class="string">''</span>,</div><div class="line">    debug:<span class="literal">false</span></div><div class="line">    yourdata:yourdata</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> wechatMgr=_w.WeChart(params);</div><div class="line"></div><div class="line">wechatMgr.InitWeChat(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.appId = result.appid;</div><div class="line">    <span class="keyword">this</span>.timestamp = result.timestamp;</div><div class="line">    <span class="keyword">this</span>.nonceStr = result.nonceStr;</div><div class="line">    <span class="keyword">this</span>.signature = result.signature;</div><div class="line">    <span class="keyword">this</span>.access_token = result.access_token;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="2、本地直接设置"><a href="#2、本地直接设置" class="headerlink" title="2、本地直接设置"></a>2、本地直接设置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> _w = <span class="built_in">require</span>(<span class="string">'jquery_wechat_sdk'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> wechatMgr= _w.WeChart(&#123;</div><div class="line">    appId: <span class="string">'your appid'</span>,</div><div class="line">    timestamp: <span class="string">'your timestamp'</span>,</div><div class="line">    nonceStr: <span class="string">'your nonceStr'</span>,</div><div class="line">    signature: <span class="string">'your signature '</span>,</div><div class="line">    access_token:<span class="string">'your access_token'</span></div><div class="line">&#125;).InitWeChat();</div></pre></td></tr></table></figure><h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>准备基础环境 <code>browserify</code> ，基础浏览器一枚，可以在开源项目中学习<a href="https://github.com/xulayen/browerisy-jquery-wechat-sdk" target="_blank" rel="external">在browserify中加载jquery_wechat_sdk</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install browserify --save-dev</div><div class="line"></div><div class="line">$ npm install jquery_wechat_sdk --save-dev</div></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="Browserify-Webpack"><a href="#Browserify-Webpack" class="headerlink" title="Browserify/Webpack"></a>Browserify/Webpack</h4><p><a href="http://browserify.org/" target="_blank" rel="external">browserify API</a>  /  <a href="https://webpack.github.io/docs/" target="_blank" rel="external">Webpack API</a><br>猛击<a href="https://github.com/xulayen/wechathand" target="_blank" rel="external">源码</a>获取项目demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> _w = <span class="built_in">require</span>(<span class="string">'jquery_wechat_sdk'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> wechatMgr=_w.WeChart(&#123;</div><div class="line">    appId: <span class="string">'your appid'</span>,</div><div class="line">    timestamp: <span class="string">'your timestamp'</span>,</div><div class="line">    nonceStr: <span class="string">'your nonceStr'</span>,</div><div class="line">    signature: <span class="string">'your signature '</span>,</div><div class="line">    access_token:<span class="string">'your access_token'</span>,</div><div class="line">    debug:<span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">wechatMgr.InitWeChat();</div></pre></td></tr></table></figure><h4 id="AMD-Asynchronous-Module-Definition"><a href="#AMD-Asynchronous-Module-Definition" class="headerlink" title="AMD (Asynchronous Module Definition)"></a>AMD (Asynchronous Module Definition)</h4><p>AMD 是为浏览器创建的模块，更多信息参见，这里推荐使用<code>require.js</code><a href="http://requirejs.org/docs/whyamd.html" target="_blank" rel="external">文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://res.wx.qq.com/open/js/jweixin-1.0.0.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.5/require.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        　　<span class="built_in">require</span>.config(&#123;</span></div><div class="line"><span class="javascript">        　　　　baseUrl: <span class="string">"./static"</span>,</span></div><div class="line"><span class="undefined">        　　　　paths: &#123;</span></div><div class="line"><span class="javascript">                    <span class="string">"jquery_wechat_sdk"</span>:<span class="string">"jquery_wechat_sdk"</span></span></div><div class="line"><span class="undefined">        　　　　&#125;</span></div><div class="line"><span class="undefined">        　　&#125;);</span></div><div class="line"><span class="javascript">            <span class="built_in">require</span>([<span class="string">'jquery_wechat_sdk'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">_w</span>)</span>&#123;</span></div><div class="line"><span class="undefined">                _w.WeChart(&#123;</span></div><div class="line"><span class="javascript">                    appId: <span class="string">'your appid'</span>,</span></div><div class="line"><span class="javascript">                    timestamp: <span class="string">'your timestamp'</span>,</span></div><div class="line"><span class="javascript">                    nonceStr: <span class="string">'your nonceStr'</span>,</span></div><div class="line"><span class="javascript">                    signature: <span class="string">'your signature '</span>,</span></div><div class="line"><span class="javascript">                    access_token:<span class="string">'your access_token'</span>,</span></div><div class="line"><span class="javascript">                    debug:<span class="literal">true</span></span></div><div class="line"><span class="undefined">                &#125;).InitWeChat();</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>Babel是下一代JavaScript编译器。其中一个特性是现在可以使用ES6/ES2015模块，尽管浏览器还没有本地支持这个特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> _w <span class="keyword">from</span> <span class="string">"jquery_wechat_sdk"</span>;</div></pre></td></tr></table></figure><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p><code>jquery_wechat_sdk</code>运行在node端，需要提供一个带有<code>document</code>的<code>window</code>，因为没有这样的<code>document</code>在<code>node</code>中存在，所以可以使用<code>jsdom</code>,这样可以达到测试的目的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jquery_wechat_sdk</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"jsdom"</span>).env(<span class="string">""</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, window</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> _w = <span class="built_in">require</span>(<span class="string">"jquery_wechat_sdk"</span>)(<span class="built_in">window</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="微信菜单"><a href="#微信菜单" class="headerlink" title="微信菜单"></a>微信菜单</h3><p><code>.InitWeChat()</code>api默认隐藏所有的微信功能菜单，如果需要显示某个功能菜单，如：</p><ol><li>显示分享到朋友圈</li><li>显示分享给朋友</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.InitWeChat(&#123;</div><div class="line">    menu_share_timeline: <span class="literal">true</span>[<span class="literal">false</span>],</div><div class="line">    menu_share_appMessage: <span class="literal">true</span>[<span class="literal">false</span>]</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="分享内容"><a href="#分享内容" class="headerlink" title="分享内容"></a>分享内容</h3><h4 id="分享到朋友圈"><a href="#分享到朋友圈" class="headerlink" title="分享到朋友圈"></a>分享到朋友圈</h4><ul><li><code>object</code>是一个对象字面量<ul><li><code>forword_title</code>：标题</li><li><code>forword_desc</code>：描述</li><li><code>forword_link</code>：跳转链接</li><li><code>forword_imgUrl</code>：图片地址</li></ul></li><li><code>fn1</code>是成功分享之后的回调函数success(<code>res</code>)<ul><li><code>res</code> 回调函数总对象</li></ul></li><li><code>fn2</code>是取消分享之后的回调函数cancel(<code>res</code>, <code>forword</code>)<ul><li><code>res</code> 回调函数总对象</li><li><code>forword</code> 当前分享内容对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.Forword([object],[fn1],[fn2])</div></pre></td></tr></table></figure><h4 id="分享给朋友"><a href="#分享给朋友" class="headerlink" title="分享给朋友"></a>分享给朋友</h4><ul><li><code>object</code>是一个对象字面量<ul><li><code>forword_title</code>：标题</li><li><code>forword_desc</code>：描述</li><li><code>forword_link</code>：跳转链接</li><li><code>forword_imgUrl</code>：图片地址</li></ul></li><li><code>fn1</code>是成功分享之后的回调函数success(<code>res</code>)<ul><li><code>res</code> 回调函数总对象</li></ul></li><li><code>fn2</code>是取消分享之后的回调函数cancel(<code>res</code>, <code>forword</code>)<ul><li><code>res</code> 回调函数总对象</li><li><code>forword</code> 当前分享内容对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.ForwordToFriend([object],[fn1],[fn2])</div></pre></td></tr></table></figure><blockquote><p><strong>和分享到朋友圈一样，<code>ShareQQ</code>、<code>ShareWeibo</code>、<code>ShareQZone</code>也是如此操作。在这里就不做赘述了。</strong></p></blockquote><h3 id="获取地理位置"><a href="#获取地理位置" class="headerlink" title="获取地理位置"></a>获取地理位置</h3><ul><li><code>type</code>默认为<code>wgs84</code>的gps坐标，如果要返回直接给openLocation用的火星坐标，可传入<code>gcj02</code></li><li><code>fn</code>是获取地理位置成功之后的回调函数success(<code>res</code>,<code>latitude</code>, <code>longitude</code>, <code>speed</code>, <code>accuracy</code>)<ul><li><code>res</code>：回调总对象</li><li><code>latitude</code>：经度</li><li><code>longitude</code>：纬度</li><li><code>speed</code>：速度</li><li><code>accuracy</code>：精度</li></ul></li></ul><blockquote><p><strong>api这里没有给到<code>cancel</code>回调函数，如果需要此回调，可重写</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.GetLocation([type],[fn])</div></pre></td></tr></table></figure><h3 id="获取网络状态"><a href="#获取网络状态" class="headerlink" title="获取网络状态"></a>获取网络状态</h3><ul><li><code>fn</code>是成功获取当前网络状态之后的回调函数success(<code>res</code>, <code>networkType</code>)<ul><li><code>res</code>：回调总对象</li><li><code>networkType</code>：当前网络类型</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.GetNetWorkType(fn)</div></pre></td></tr></table></figure><h3 id="选择图片"><a href="#选择图片" class="headerlink" title="选择图片"></a>选择图片</h3><ul><li><code>fn</code>是当前成功回调函数success(<code>res</code>, <code>localIds</code>)<ul><li><code>res</code>：总回调对象</li><li><code>localIds</code>：选定照片的本地ID列表，localId可以作为img标签的src属性显示图片</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.ChooseImg([fn])</div></pre></td></tr></table></figure><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><ul><li><code>imgLocalIds</code>需要上传的图片的本地ID，由<code>chooseImage</code>接口获得</li><li><code>fn</code>当前成功回调的函数success(<code>res</code>, <code>serverId</code>)<ul><li><code>res</code>：回调总对象</li><li><code>serverId</code>：返回图片的服务器端ID</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.UploadImage([imgLocalIds], [fn])</div></pre></td></tr></table></figure><h3 id="预览图片"><a href="#预览图片" class="headerlink" title="预览图片"></a>预览图片</h3><ul><li><code>previewCurrentImg</code>当前显示图片的http链接</li><li><code>previewUrls</code>需要预览的图片http链接列表[]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.PreviewImage([previewCurrentImg], [previewUrls])</div></pre></td></tr></table></figure><h3 id="打开地图"><a href="#打开地图" class="headerlink" title="打开地图"></a>打开地图</h3><ul><li><code>res</code>是一个对象包含<ul><li><code>latitude</code>：纬度，浮点数，范围为90 ~ -90</li><li><code>longitude</code>：经度，浮点数，范围为180 ~ -180。</li><li><code>name</code>：位置名</li><li><code>address</code>：地址详细说明</li><li><code>scale</code>：地图缩放级别,整形值,范围从1~28。默认为最大</li><li><code>infoUrl</code>：在查看位置界面底部显示的超链接,可点击跳转</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wechatMgr.OpenLocation(res)</div></pre></td></tr></table></figure><h3 id="调取摄像头"><a href="#调取摄像头" class="headerlink" title="调取摄像头"></a>调取摄像头</h3><ul><li>fn是当前扫描成功之后的回调函数success(<code>result</code>)<ul><li><code>result</code>：扫码返回的结果</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onlick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    wechatMgr.Scan(fn)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onlick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.Scan(fn)</div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="string">'#btn1'</span>).Scan(fn)</div></pre></td></tr></table></figure><h3 id="显示隐藏右上角菜单"><a href="#显示隐藏右上角菜单" class="headerlink" title="显示隐藏右上角菜单"></a>显示隐藏右上角菜单</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**隐藏右上角菜单**/</span></div><div class="line">wechatMgr.HideOptionMenu();</div><div class="line"></div><div class="line"><span class="comment">/**显示右上角菜单**/</span></div><div class="line">wechatMgr.ShowOptionMenu();</div></pre></td></tr></table></figure><h3 id="微信卡券"><a href="#微信卡券" class="headerlink" title="微信卡券"></a>微信卡券</h3><h3 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h3><ul><li><code>object</code>是当前支付对象字面量<ul><li><code>timestamp</code>：支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符</li><li><code>nonceStr</code>：支付签名随机串，不长于 32 位</li><li><code>package</code>：统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=<em>*</em>）</li><li><code>signType</code>：签名方式，默认为<code>SHA1</code>，使用新版支付需传入<code>MD5</code></li><li><code>paySign</code>：支付签名</li></ul></li><li><code>fn</code>是当前支付成功回调函数success(<code>res</code>, <code>pay</code>)<ul><li><code>res</code>：当前支付回调总对象</li><li><code>pay</code>：支付对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wechatMgr.ChooseWXPay([object],[fn])</div></pre></td></tr></table></figure><h3 id="是否是微信浏览器"><a href="#是否是微信浏览器" class="headerlink" title="是否是微信浏览器"></a>是否是微信浏览器</h3><ul><li><code>fn</code>是当前成功回调函数success(<code>isWeixinBro</code>)<ul><li><code>isWeixinBro</code>是否是微信浏览器<code>boolean</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wechatMgr.IsWeChatBrower([fn])</div></pre></td></tr></table></figure><h3 id="关闭微信窗口"><a href="#关闭微信窗口" class="headerlink" title="关闭微信窗口"></a>关闭微信窗口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wechatMgr.CloseWindow()</div></pre></td></tr></table></figure><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><ul><li><code>fn</code>是当前异常捕获之后的回调函数success(<code>res</code>)<ul><li><code>res</code>是异常信息</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wechatMgr.InitWxError([fn])</div></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="可配置项"><a href="#可配置项" class="headerlink" title="可配置项"></a>可配置项</h3><h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><p>是否打开debug调试，默认<code>false</code></p><h4 id="baseapi-checkJsApi"><a href="#baseapi-checkJsApi" class="headerlink" title="baseapi_checkJsApi"></a>baseapi_checkJsApi</h4><p>判断当前客户端是否支持指定的js接口，默认<code>true</code></p><h4 id="baseapi-onMenuShareTimeline"><a href="#baseapi-onMenuShareTimeline" class="headerlink" title="baseapi_onMenuShareTimeline"></a>baseapi_onMenuShareTimeline</h4><p>是否启用分享到朋友圈js接口，默认<code>true</code></p><h4 id="baseapi-onMenuShareAppMessage"><a href="#baseapi-onMenuShareAppMessage" class="headerlink" title="baseapi_onMenuShareAppMessage"></a>baseapi_onMenuShareAppMessage</h4><p>是否启用分享给朋友js接口，默认<code>true</code></p><h4 id="baseapi-onMenuShareQQ"><a href="#baseapi-onMenuShareQQ" class="headerlink" title="baseapi_onMenuShareQQ"></a>baseapi_onMenuShareQQ</h4><p>是否启用分享到QQjs接口，默认<code>true</code></p><h4 id="baseapi-onMenuShareWeibo"><a href="#baseapi-onMenuShareWeibo" class="headerlink" title="baseapi_onMenuShareWeibo"></a>baseapi_onMenuShareWeibo</h4><p>是否启用分享到微博js接口，默认<code>true</code></p><h4 id="baseapi-hideMenuItems"><a href="#baseapi-hideMenuItems" class="headerlink" title="baseapi_hideMenuItems"></a>baseapi_hideMenuItems</h4><p>是否启用隐藏菜单js接口，默认<code>true</code></p><h4 id="baseapi-showMenuItems"><a href="#baseapi-showMenuItems" class="headerlink" title="baseapi_showMenuItems"></a>baseapi_showMenuItems</h4><p>是否启用显示菜单js接口，默认<code>true</code></p><h4 id="baseapi-hideAllNonBaseMenuItem"><a href="#baseapi-hideAllNonBaseMenuItem" class="headerlink" title="baseapi_hideAllNonBaseMenuItem"></a>baseapi_hideAllNonBaseMenuItem</h4><p>是否启用隐藏基础菜单js接口，默认<code>true</code></p><h4 id="baseapi-showAllNonBaseMenuItem"><a href="#baseapi-showAllNonBaseMenuItem" class="headerlink" title="baseapi_showAllNonBaseMenuItem"></a>baseapi_showAllNonBaseMenuItem</h4><p>是否启用显示基础菜单js接口，默认<code>true</code></p><h4 id="baseapi-hideOptionMenu"><a href="#baseapi-hideOptionMenu" class="headerlink" title="baseapi_hideOptionMenu"></a>baseapi_hideOptionMenu</h4><p>是否启用隐藏普通菜单js接口，默认<code>true</code></p><h4 id="baseapi-showOptionMenu"><a href="#baseapi-showOptionMenu" class="headerlink" title="baseapi_showOptionMenu"></a>baseapi_showOptionMenu</h4><p>是否启用显示普通菜单js接口，默认<code>true</code></p><h4 id="baseapi-closeWindow"><a href="#baseapi-closeWindow" class="headerlink" title="baseapi_closeWindow"></a>baseapi_closeWindow</h4><p>是否启用关闭窗口js接口，默认<code>true</code></p><h4 id="baseapi-scanQRCode"><a href="#baseapi-scanQRCode" class="headerlink" title="baseapi_scanQRCode"></a>baseapi_scanQRCode</h4><p>是否启用扫描二维码js接口，默认<code>true</code></p><h4 id="baseapi-startRecord"><a href="#baseapi-startRecord" class="headerlink" title="baseapi_startRecord"></a>baseapi_startRecord</h4><p>是否启用录音js接口，默认<code>true</code></p><h4 id="baseapi-stopRecord"><a href="#baseapi-stopRecord" class="headerlink" title="baseapi_stopRecord"></a>baseapi_stopRecord</h4><p>是否启用停止录音js接口，默认<code>true</code></p><h4 id="baseapi-onVoiceRecordEnd"><a href="#baseapi-onVoiceRecordEnd" class="headerlink" title="baseapi_onVoiceRecordEnd"></a>baseapi_onVoiceRecordEnd</h4><p>是否启用录音结束js接口，默认<code>true</code></p><h4 id="baseapi-playVoice"><a href="#baseapi-playVoice" class="headerlink" title="baseapi_playVoice"></a>baseapi_playVoice</h4><p>是否启用播放录音js接口，默认<code>true</code></p><h4 id="baseapi-pauseVoice"><a href="#baseapi-pauseVoice" class="headerlink" title="baseapi_pauseVoice"></a>baseapi_pauseVoice</h4><p>是否启用暂停录音js接口，默认<code>true</code></p><h4 id="baseapi-stopVoice"><a href="#baseapi-stopVoice" class="headerlink" title="baseapi_stopVoice"></a>baseapi_stopVoice</h4><p>是否启用停止录音js接口，默认<code>true</code></p><h4 id="baseapi-onVoicePlayEnd"><a href="#baseapi-onVoicePlayEnd" class="headerlink" title="baseapi_onVoicePlayEnd"></a>baseapi_onVoicePlayEnd</h4><p>是否启用播放停止js接口，默认<code>true</code></p><h4 id="baseapi-uploadVoice"><a href="#baseapi-uploadVoice" class="headerlink" title="baseapi_uploadVoice"></a>baseapi_uploadVoice</h4><p>是否启用上传录音js接口，默认<code>true</code></p><h4 id="baseapi-downloadVoice"><a href="#baseapi-downloadVoice" class="headerlink" title="baseapi_downloadVoice"></a>baseapi_downloadVoice</h4><p>是否启用下载录音js接口，默认<code>true</code></p><h4 id="baseapi-chooseImage"><a href="#baseapi-chooseImage" class="headerlink" title="baseapi_chooseImage"></a>baseapi_chooseImage</h4><p>是否启用选择图片js接口，默认<code>true</code></p><h4 id="baseapi-previewImage"><a href="#baseapi-previewImage" class="headerlink" title="baseapi_previewImage"></a>baseapi_previewImage</h4><p>是否启用预览图片js接口，默认<code>true</code>,</p><h4 id="baseapi-uploadImage"><a href="#baseapi-uploadImage" class="headerlink" title="baseapi_uploadImage"></a>baseapi_uploadImage</h4><p>是否启用上传图片js接口，默认<code>true</code></p><h4 id="baseapi-downloadImage"><a href="#baseapi-downloadImage" class="headerlink" title="baseapi_downloadImage"></a>baseapi_downloadImage</h4><p>是否启用下载图片js接口，默认<code>true</code></p><h4 id="baseapi-translateVoice"><a href="#baseapi-translateVoice" class="headerlink" title="baseapi_translateVoice"></a>baseapi_translateVoice</h4><p>是否启用转换声音js接口，默认<code>true</code></p><h4 id="baseapi-getNetworkType"><a href="#baseapi-getNetworkType" class="headerlink" title="baseapi_getNetworkType"></a>baseapi_getNetworkType</h4><p>是否启用获取网络类型js接口，默认<code>true</code></p><h4 id="baseapi-openLocation"><a href="#baseapi-openLocation" class="headerlink" title="baseapi_openLocation"></a>baseapi_openLocation</h4><p>是否启用打开地图js接口，默认<code>true</code></p><h4 id="baseapi-getLocation"><a href="#baseapi-getLocation" class="headerlink" title="baseapi_getLocation"></a>baseapi_getLocation</h4><p>是否启用获取地理位置js接口，默认<code>true</code></p><h4 id="baseapi-chooseWXPay"><a href="#baseapi-chooseWXPay" class="headerlink" title="baseapi_chooseWXPay"></a>baseapi_chooseWXPay</h4><p>是否启用微信支付js接口，默认<code>true</code></p><h4 id="baseapi-openProductSpecificView"><a href="#baseapi-openProductSpecificView" class="headerlink" title="baseapi_openProductSpecificView"></a>baseapi_openProductSpecificView</h4><p>是否启用跳转微信商品页js接口，默认<code>true</code></p><h4 id="baseapi-addCard"><a href="#baseapi-addCard" class="headerlink" title="baseapi_addCard"></a>baseapi_addCard</h4><p>是否启用添加卡券js接口，默认<code>true</code></p><h4 id="baseapi-chooseCard"><a href="#baseapi-chooseCard" class="headerlink" title="baseapi_chooseCard"></a>baseapi_chooseCard</h4><p>是否启用选择卡券js接口，默认<code>true</code></p><h4 id="baseapi-openCard"><a href="#baseapi-openCard" class="headerlink" title="baseapi_openCard"></a>baseapi_openCard</h4><p>是否启用打开卡券js接口，默认<code>true</code></p><h4 id="appId"><a href="#appId" class="headerlink" title="appId"></a>appId</h4><p>微信<code>appid</code>，可直接传递也可以通过<code>api</code>远程地址获取<code>result.APPID</code></p><h4 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h4><p>时间戳，可直接传递也可以通过<code>api</code>远程地址获取<code>result.TIMESTAMP</code></p><h4 id="nonceStr"><a href="#nonceStr" class="headerlink" title="nonceStr"></a>nonceStr</h4><p>特定字符窜，可直接传递也可以通过<code>api</code>远程地址获取<code>result.NONCESTR</code></p><h4 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h4><p>签名，可直接传递也可以通过<code>api</code>远程地址获取<code>result.SIGNATURE</code></p><h4 id="access-token"><a href="#access-token" class="headerlink" title="access_token"></a>access_token</h4><p>token，可直接传递也可以通过<code>api</code>远程地址获取<code>result.ACCESS_TOKEN</code></p><h4 id="menu-share-timeline"><a href="#menu-share-timeline" class="headerlink" title="menu_share_timeline"></a>menu_share_timeline</h4><p>分享到朋友圈，默认<code>true</code></p><h4 id="menu-share-appMessage"><a href="#menu-share-appMessage" class="headerlink" title="menu_share_appMessage"></a>menu_share_appMessage</h4><p>分享给朋友，默认<code>true</code></p><h4 id="menu-share-favorite"><a href="#menu-share-favorite" class="headerlink" title="menu_share_favorite"></a>menu_share_favorite</h4><p>收藏，默认<code>true</code></p><h4 id="menu-share-openWithSafari"><a href="#menu-share-openWithSafari" class="headerlink" title="menu_share_openWithSafari"></a>menu_share_openWithSafari</h4><p>浏览器中打开，默认<code>true</code></p><h4 id="menu-share-email"><a href="#menu-share-email" class="headerlink" title="menu_share_email"></a>menu_share_email</h4><p>邮件打开，默认<code>true</code></p><h4 id="menu-share-qq"><a href="#menu-share-qq" class="headerlink" title="menu_share_qq"></a>menu_share_qq</h4><p>分享到qq，默认<code>true</code></p><h4 id="menu-share-QZone"><a href="#menu-share-QZone" class="headerlink" title="menu_share_QZone"></a>menu_share_QZone</h4><p>分享到qq空间，默认<code>true</code></p><h4 id="menu-share-weiboApp"><a href="#menu-share-weiboApp" class="headerlink" title="menu_share_weiboApp"></a>menu_share_weiboApp</h4><p>分享到微博，默认<code>true</code></p><h4 id="menu-share-copyUrl"><a href="#menu-share-copyUrl" class="headerlink" title="menu_share_copyUrl"></a>menu_share_copyUrl</h4><p>复制，默认<code>true</code></p><h4 id="menu-share-setFont"><a href="#menu-share-setFont" class="headerlink" title="menu_share_setFont"></a>menu_share_setFont</h4><p>设置字体，默认<code>true</code></p><h4 id="menu-share-readMode"><a href="#menu-share-readMode" class="headerlink" title="menu_share_readMode"></a>menu_share_readMode</h4><p>阅读模式，默认<code>true</code></p><h4 id="menu-share-refresh"><a href="#menu-share-refresh" class="headerlink" title="menu_share_refresh"></a>menu_share_refresh</h4><p>刷新，默认<code>true</code></p><h4 id="api"><a href="#api" class="headerlink" title="api"></a>api</h4><p>远程api地址，本工具是使用<code>ajax</code>来交互数据的，并没有使用<code>jsonp</code>等跨域方式，所以最好你的<code>api</code>地址在服务器端已经开启了可以跨域的限制<code>Access-Control-Allow-Origin=your domain</code><br><del>#### facid</del><br><del>业务标识</del><br><del>#### typenum</del><br><del>公众号类型</del></p><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><p>提交的数据<code>{}</code>对象字面量</p><h4 id="scanAuthUrl"><a href="#scanAuthUrl" class="headerlink" title="scanAuthUrl"></a>scanAuthUrl</h4><p>需要调取摄像头的页面，默认<code>location.href</code></p><h4 id="hideOptionMenu"><a href="#hideOptionMenu" class="headerlink" title="hideOptionMenu"></a>hideOptionMenu</h4><p>是否隐藏菜单，默认<code>true</code></p><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>是否异步，默认<code>false</code></p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>提交类型，默认<code>post</code></p><h4 id="ContentType"><a href="#ContentType" class="headerlink" title="ContentType"></a>ContentType</h4><p>文档类型，默认<code>application/x-www-form-urlencoded</code></p><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>是否启用缓存，默认<code>true</code></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="调用api的方式有几种？"><a href="#调用api的方式有几种？" class="headerlink" title="调用api的方式有几种？"></a>调用api的方式有几种？</h3><p>1、<code>jquery</code>静态调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onlick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.Scan(fn)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、<code>jquery</code>实例调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#btn1'</span>).Scan(fn)</div></pre></td></tr></table></figure></p><p>3、<code>wechart</code>对象调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onlick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    wechatMgr.Scan(fn)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="如何调试debug"><a href="#如何调试debug" class="headerlink" title="如何调试debug"></a>如何调试debug</h3><p>1、使用<code>微信开发这工具</code><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=2017119" target="_blank" rel="external">调试</a></p><p>2、在<code>WeChart</code>中启用<code>debug</code>为<code>true</code>即可</p><h3 id="无法使用node模式加载？"><a href="#无法使用node模式加载？" class="headerlink" title="无法使用node模式加载？"></a>无法使用<code>node</code>模式加载？</h3><p>在<code>npm</code>是可以直接下载使用的，但是次此插件仅供在浏览器端使用，<code>node</code>端无法执行本插件。会抛出<code>jquery_wechat_sdk requires a window with a document</code>的异常</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="需要改善的地方"><a href="#需要改善的地方" class="headerlink" title="需要改善的地方"></a>需要改善的地方</h3><p>1、每次调用都会从服务器端获取<code>appid</code>等信息，需要优化处理。<br>2、处理<code>signature</code>、<code>access_token</code>需要模块化</p><h3 id="外链地址"><a href="#外链地址" class="headerlink" title="外链地址"></a>外链地址</h3><p>1、<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="external">微信官方文档</a><br>2、<a href="https://www.npmjs.com/package/jquery_wechat_sdk" target="_blank" rel="external">jquery_wechat_sdk</a>在npm上的地址<br>3、<a href="https://github.com/xulayen/WeChat/" target="_blank" rel="external">jquery_wechat_sdk</a>源码<br>4、<a href="https://gitter.im/jquery_wechat_sdk/Lobby" target="_blank" rel="external">在线聊天地址</a></p><h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>QQ群：596087259 ，使用疑问，开发，贡献代码请加群。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;依赖模块&quot;&gt;&lt;a href=&quot;#依赖模块&quot; class=&quot;headerlink&quot; title=&quot;依赖模块&quot;&gt;&lt;/a&gt;依赖模块&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install jqyery&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install weixin-js-sdk&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;一个基于&lt;code&gt;jquery&lt;/code&gt;的兼容AMD、CMD、Commandjs的&lt;a href=&quot;https://www.npmjs.com/package/jquery_wechat_sdk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模块包&lt;/a&gt;，目的在于帮助微信开发者更好的更方便的使用微信里面的api。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tool" scheme="yikewawa.gitbub.io/categories/tool/"/>
    
    
      <category term="Wechat" scheme="yikewawa.gitbub.io/tags/Wechat/"/>
    
      <category term="api" scheme="yikewawa.gitbub.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>前端一键打包发布</title>
    <link href="yikewawa.gitbub.io/2016/11/13/%E5%89%8D%E7%AB%AF%E4%B8%80%E9%94%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/"/>
    <id>yikewawa.gitbub.io/2016/11/13/前端一键打包发布/</id>
    <published>2016-11-13T10:24:18.000Z</published>
    <updated>2019-03-21T04:41:52.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h2><p>全局安装 gulp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install --global gulp</div></pre></td></tr></table></figure><p>作为项目的开发依赖（devDependencies）安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure><a id="more"></a><h2 id="创建gulpfile-js文件"><a href="#创建gulpfile-js文件" class="headerlink" title="创建gulpfile.js文件"></a>创建<em>gulpfile.js</em>文件</h2><p>在项目根目录下创建一个名为 gulpfile.js 的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  // 将你的默认的任务代码放在这</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="运行-gulp"><a href="#运行-gulp" class="headerlink" title="运行 gulp"></a>运行 gulp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp default</div></pre></td></tr></table></figure><h2 id="编译Less"><a href="#编译Less" class="headerlink" title="编译Less"></a>编译Less</h2><p>安装<em>gulp-less</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install gulp-less gulp-rename --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">less = require(<span class="string">'gulp-less'</span>),//</div><div class="line">rename = require(<span class="string">'gulp-rename'</span>), //文件重命名模块</div><div class="line"></div><div class="line">//编译Less并且压缩改名*.min.css</div><div class="line">gulp.task(<span class="string">'Less'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    gulp.src(<span class="string">'src/css'</span>, &#123; base: <span class="string">'.'</span> &#125;) //该任务针对的文件</div><div class="line">        .pipe(rename(&#123; suffix: <span class="string">'.min'</span> &#125;))</div><div class="line">        .pipe(less()) //该任务调用的模块</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ gulp Less</div></pre></td></tr></table></figure><h2 id="编译Less-amp-压缩改名"><a href="#编译Less-amp-压缩改名" class="headerlink" title="编译Less&amp;压缩改名"></a>编译Less&amp;压缩改名</h2><p>//编译Less并且压缩改名*.min.css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'Less2'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    gulp.src(<span class="string">'src/css'</span>, &#123; base: <span class="string">'.'</span> &#125;) //该任务针对的文件</div><div class="line">        .pipe(rename(&#123; suffix: <span class="string">'.min'</span> &#125;))</div><div class="line">        .pipe(less()) //该任务调用的模块</div><div class="line">        .pipe(cssmin()) //该任务调用的模块</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css'</span>)); //将会在src/css下生成index.css</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ gulp Less2</div></pre></td></tr></table></figure><h2 id="压缩-amp-合并Css-amp-改名"><a href="#压缩-amp-合并Css-amp-改名" class="headerlink" title="压缩&amp;合并Css&amp;改名"></a>压缩&amp;合并Css&amp;改名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install cssmin concat --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cssmin = require(<span class="string">'gulp-minify-css'</span>), //压缩css</div><div class="line">concat = require(<span class="string">'gulp-concat'</span>), //文件合并</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//压缩合并Css改名*.min.css</div><div class="line">gulp.task(<span class="string">'CssConcat'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    gulp.src(<span class="string">'src/css'</span>, &#123; base: <span class="string">'.'</span> &#125;)</div><div class="line">        .pipe(rename(&#123; suffix: <span class="string">'.min'</span> &#125;))</div><div class="line">        .pipe(cssmin())</div><div class="line">        .pipe(concat(<span class="string">'newname'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ gulp CssConcat</div></pre></td></tr></table></figure><h2 id="压缩html"><a href="#压缩html" class="headerlink" title="压缩html"></a>压缩html</h2><p>安装<em>gulp-htmlmin</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-htmlmin --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">htmlmin = require(<span class="string">'gulp-htmlmin'</span>),</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'Html'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    var options = &#123;</div><div class="line">        removeComments: <span class="literal">true</span>,</div><div class="line">        collapseWhitespace: <span class="literal">true</span>,</div><div class="line">        collapseBooleanAttributes: <span class="literal">true</span>,</div><div class="line">        removeEmptyAttributes: <span class="literal">true</span>,</div><div class="line">        removeScriptTypeAttributes: <span class="literal">true</span>,</div><div class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span>,</div><div class="line">        minifyJS: <span class="literal">true</span>,</div><div class="line">        minifyCSS: <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'src/html'</span>, &#123; base: <span class="string">'.'</span> &#125;)</div><div class="line">        .pipe(htmlmin(options))</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/html'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp Html</div></pre></td></tr></table></figure><h2 id="压缩jpg、png图片"><a href="#压缩jpg、png图片" class="headerlink" title="压缩jpg、png图片"></a>压缩jpg、png图片</h2><p>安装<em>gulp-imagemin</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install gulp-imagemin gulpif --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">imagemin = require(<span class="string">'gulp-imagemin'</span>), //图片压缩</div><div class="line">gulpif = require(<span class="string">'gulp-if'</span>),</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'Image'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'src/images'</span>, &#123; base: <span class="string">'.'</span> &#125;)</div><div class="line">        .pipe(gulpif([<span class="literal">true</span>,<span class="literal">false</span>], imagemin()))</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/images'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp Image</div></pre></td></tr></table></figure><h2 id="压缩JS"><a href="#压缩JS" class="headerlink" title="压缩JS"></a>压缩JS</h2><p>安装<em>gulp-uglify</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-uglify --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uglify = require(<span class="string">'gulp-uglify'</span>), //混淆js</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'JS'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'src/js'</span>, &#123; base: <span class="string">'.'</span> &#125;)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp JS</div></pre></td></tr></table></figure><blockquote><p><strong>到目前为止，已经基本实现gulp打包压缩前端代码的核心功能，但是这远远还不够。因为在日常开发过程中我们会面临各种前端优化问题，比如缓存、发布、打包所带来的一系列问题。</strong></p></blockquote><p>一般情况下，我们前端开发就会想了解<a href="https://www.zhihu.com/question/20790576" target="_blank" rel="external">大公司是如何打包的？</a>，在文章中，@张云龙有详细的介绍各种<em>前端工程化</em>，我就不做赘述了。如果你已经看完<a href="https://www.zhihu.com/question/20790576" target="_blank" rel="external">大公司是如何打包的？</a>那么，你又没有想自己来试一试的想法呢。OK，我们来了解一下吧~~</p><p>既然如此，我们来看一下如何解决以下问题：</p><ol><li>先发布应用（html）还是先发布资源（css、js、png、jpg等）？</li><li>如何实现资源精确缓存？</li><li>如何让浏览器主动放弃已经弃用的缓存？</li><li>如何把资源放到CDN节点上？</li></ol><p>我们先把问题放一边，接下来继续改造我们的<em>gulpfile.js</em>文件</p><h2 id="添加hash后缀"><a href="#添加hash后缀" class="headerlink" title="添加hash后缀"></a>添加hash后缀</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install gulp-rev --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">rev = require(<span class="string">'gulp-rev'</span>), //更改<span class="built_in">hash</span>版本号</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//Css添加版本号</div><div class="line">gulp.task(<span class="string">'RevCss'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'src/css'</span>)</div><div class="line">    .pipe(rev())</div><div class="line">    .pipe(rev.manifest())</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build'</span> + <span class="string">'/rev/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ gulp RevCss</div></pre></td></tr></table></figure><p>执行完成之后这次会有不一样的地方，会在<em>rev/css</em>目录下面会生成一个<em>rev-manifest.json</em>的文件，这个文件将作为替换原始原件的依据并且打包到当前自定义目录<em>./build/rev</em>下，当然这个<em>hash</em>就是当前文件内容的哈希值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"css/animate.css"</span>: <span class="string">"css/animate-7a37992a94.css"</span>,</div><div class="line">  <span class="string">"css/front.css"</span>: <span class="string">"css/front-26561396d8.css"</span>,</div><div class="line">  <span class="string">"css/index.css"</span>: <span class="string">"css/index-38b95d80bb.css"</span>,</div><div class="line">  <span class="string">"script/plugins/layer_mobile/need/layer.css"</span>: <span class="string">"script/plugins/layer_mobile/need/layer-f6c02b5edb.css"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>依此类推同理可写出<code>js/png/jpg</code>的哈希任务，如果文件更改，发布的时候哈希值自然就会发生改变，发布到服务器之后，html页面则会自动放弃以前失效的缓存。</p><h2 id="精确管理缓存"><a href="#精确管理缓存" class="headerlink" title="精确管理缓存"></a>精确管理缓存</h2><p>精确管理缓存，顾名思义就是在html页面或者css页面中引用的资源文件加上hash后缀，并且自动替换成当前指定的文件，那现在就要用到文章上面提到的<code>rev-manifest.json</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install gulp-rev-collector --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">revCollector = require(<span class="string">'gulp-rev-collector'</span>),</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'RevHtml'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src([<span class="string">'./build/rev/**/*.json'</span>, <span class="string">'./build/app/**/*.html'</span>])</div><div class="line">    .pipe(revCollector(</div><div class="line">        &#123;</div><div class="line">            replaceReved: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    ))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build'</span> + <span class="string">'/app'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ gulp RevHtml</div></pre></td></tr></table></figure><p>执行完成之后再回到<code>./build/app/</code>看当前html页面指向的css是否已经变为<code>css/index-38b95d80bb.css</code>，如果是则恭喜你成功了，如果没有，你还需要斟酌一下~~<br>至于其他的css中有的图片或者html页面中有的js/image则都是一个道理，可以葫芦画瓢写多个<code>task</code>执行即可</p><h2 id="把资源放到CDN节点上"><a href="#把资源放到CDN节点上" class="headerlink" title="把资源放到CDN节点上"></a>把资源放到CDN节点上</h2><p>放到CDN节点上无非就是更改已经发布好的源文件的资源文件链接，这里使用替换即可，也可使用其他方式实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install gulp-replace --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">replace = require(<span class="string">'gulp-replace'</span>),</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'CDN'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./build/app/**/*.html'</span>)</div><div class="line">    .pipe(replace(<span class="string">'../../static/css'</span>, <span class="string">'http://cdn.com/css'</span>))</div><div class="line">    .pipe(replace(<span class="string">'../../static/js'</span>, <span class="string">'http://cdn.com/js'</span>))</div><div class="line">    .pipe(replace(<span class="string">'../../static/image'</span>, <span class="string">'http://cdn.com/image'</span>)</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build'</span> + <span class="string">'/app'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ gulp CDN</div></pre></td></tr></table></figure><p>同理，在css文件或者其他文件中有引用资源文件就再写几个对应的<code>task</code>即可。</p><h2 id="清除发布目录"><a href="#清除发布目录" class="headerlink" title="清除发布目录"></a>清除发布目录</h2><p>OK，在执行之前需要清理一下当前发布目录<code>./build</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install  gulp-clean --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clean = require(<span class="string">'gulp-clean'</span>), //删除</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//清空发布目录</div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./build'</span> + <span class="string">'/*'</span>, &#123; <span class="built_in">read</span>: <span class="literal">false</span> &#125;)</div><div class="line">        .pipe(clean());</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ gulp clean</div></pre></td></tr></table></figure><h2 id="执行队列"><a href="#执行队列" class="headerlink" title="执行队列"></a>执行队列</h2><p>那么，问题来了。这么多的<code>task</code>难道要一个一个的手动执行么？当然可以一次性搞定撒，要不然怎么叫一键打包发布呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//默认执行</div><div class="line">gulp.task(<span class="string">'build'</span>, <span class="keyword">function</span> (cb) &#123;</div><div class="line">    runSequence(<span class="string">'clean'</span>,task1<span class="string">', '</span>task2<span class="string">','</span>……<span class="string">','</span>zip<span class="string">', cb);</span></div><div class="line"><span class="string">&#125;);</span></div></pre></td></tr></table></figure><p>只需执行<code>build</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ gulp build</div></pre></td></tr></table></figure><h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p>OK,既然是一键打包发布，那么如何打包发布呢？那就要使用<code>zip</code> <code>ftp</code>了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install gulp-zip gulp-ftp --save-dev</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">zip = require(<span class="string">'gulp-zip'</span>),</div><div class="line">ftp = require(<span class="string">'gulp-ftp'</span>),</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//打包</div><div class="line">gulp.task(<span class="string">'zip'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    gulp.src(fileConfig.output.dist + <span class="string">'/**/**'</span>)</div><div class="line">        .pipe(zip(<span class="string">'name-20171011.zip'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./build/build_zip'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//上传</div><div class="line">gulp.task(<span class="string">'ftp'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(<span class="string">'努力上传中...'</span>);</div><div class="line">        gulp.src(<span class="string">"./build/build_zip/**"</span>)</div><div class="line">        .pipe(ftp(&#123;</div><div class="line">        host: <span class="string">'ip'</span>,</div><div class="line">        port: port,</div><div class="line">        user: <span class="string">'name'</span>,</div><div class="line">        pass: <span class="string">'pwd'</span>,</div><div class="line">        remotePath: <span class="string">"projectname/20170101/"</span></div><div class="line">    &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>书接上文，在文章的中段，我抛出了几个问题，通读全文你是否已经有了答案？前端优化已经不再是<code>html css js image</code>简单问题，而是一个工程化问题：</p><ol><li>配置超长时间的本地缓存                 —— 节省带宽，提高性能</li><li>采用内容摘要作为缓存更新依据      ——精确的缓存控制</li><li>静态资源CDN部署                           ——优化网络请求</li><li>资源发布路径实现非覆盖式发布  —— 平滑升级</li></ol><p>当然，这个只是使用<code>gulp</code>来自己编写，也可使用<code>fis</code>来进行系统操作。</p><h2 id="中文API"><a href="#中文API" class="headerlink" title="中文API"></a>中文API</h2><p><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external">http://www.gulpjs.com.cn/docs/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装gulp&quot;&gt;&lt;a href=&quot;#安装gulp&quot; class=&quot;headerlink&quot; title=&quot;安装gulp&quot;&gt;&lt;/a&gt;安装gulp&lt;/h2&gt;&lt;p&gt;全局安装 gulp&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install --global gulp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作为项目的开发依赖（devDependencies）安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install --save-dev gulp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端工程化" scheme="yikewawa.gitbub.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
      <category term="gulp" scheme="yikewawa.gitbub.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>快速理解模块化加载</title>
    <link href="yikewawa.gitbub.io/2016/11/13/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BD/"/>
    <id>yikewawa.gitbub.io/2016/11/13/快速理解模块化加载/</id>
    <published>2016-11-13T04:14:25.000Z</published>
    <updated>2019-03-21T04:41:52.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript模块化"><a href="#Javascript模块化" class="headerlink" title="Javascript模块化"></a>Javascript模块化</h2><p>在了解这些规范之前，还是先了解一下什么是模块化。</p><blockquote><p>模块化是指在解决某一个复杂问题或者一系列的杂糅问题时，依照一种分类的思维把问题进行系统性的分解以之处理。模块化是一种处理复杂系统分解为代码结构更合理，可维护性更高的可管理的模块的方式。可以想象一个巨大的系统代码，被整合优化分割成逻辑性很强的模块时，对于软件是一种何等意义的存在。对于软件行业来说：解耦软件系统的复杂性，使得不管多么大的系统，也可以将管理，开发，维护变得“有理可循”。</p><p>还有一些对于模块化一些专业的定义为：模块化是软件系统的属性，这个系统被分解为一组高内聚，低耦合的模块。那么在理想状态下我们只需要完成自己部分的核心业务逻辑代码，其他方面的依赖可以通过直接加载被人已经写好模块进行使用即可。</p></blockquote><a id="more"></a><p>首先，既然是模块化设计，那么作为一个模块化系统所必须的能力：</p><ol><li>定义封装的模块。</li><li>定义新模块对其他模块的依赖。</li><li>可对其他模块的引入支持。</li></ol><p>好了，思想有了，那么总要有点什么来建立一个模块化的规范制度吧，不然各式各样的模块加载方式只会将局搅得更为混乱。那么在JavaScript中出现了一些非传统模块开发方式的规范 <em>CommonJS</em>的模块规范，<em>AMD</em>（Asynchronous Module Definition），<em>CMD</em>（Common Module Definition）等。</p><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><blockquote><p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。</p></blockquote><p>根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// foobar.js</div><div class="line"></div><div class="line">//私有变量</div><div class="line">var <span class="built_in">test</span> = 123;</div><div class="line"></div><div class="line">//公有方法</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">foobar</span></span> () &#123;</div><div class="line"></div><div class="line">    this.foo = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        // <span class="keyword">do</span> someing ...</div><div class="line">    &#125;</div><div class="line">    this.bar = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        //<span class="keyword">do</span> someing ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//exports对象上的方法和变量是公有的</div><div class="line">var foobar = new foobar();</div><div class="line">exports.foobar = foobar;</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//require方法默认读取js文件，所以可以省略js后缀</div><div class="line">var <span class="built_in">test</span> = require(<span class="string">'./boobar'</span>).foobar;</div><div class="line"></div><div class="line">test.bar();</div></pre></td></tr></table></figure><p><em>CommonJS</em> 加载模块是同步的，所以只有加载完成才能执行后面的操作。像<em>Node.js</em>主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以<em>CommonJS</em>规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 <em>AMD</em> <em>CMD</em> 解决方案。</p><h2 id="CMD和SeaJS"><a href="#CMD和SeaJS" class="headerlink" title="CMD和SeaJS"></a>CMD和SeaJS</h2><blockquote><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出</p></blockquote><ol><li>对于依赖的模块AMD是提前执行，CMD是延迟执行。不过RequireJS从2.0开始，也改成可以延迟执行（根据写法不同，处理方式不通过）。</li><li>CMD推崇依赖就近，AMD推崇依赖前置。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//AMD</div><div class="line">define([<span class="string">'./a'</span>,<span class="string">'./b'</span>], <span class="keyword">function</span> (a, b) &#123;</div><div class="line"></div><div class="line">    //依赖一开始就写好</div><div class="line">    a.test();</div><div class="line">    b.test();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//CMD</div><div class="line">define(<span class="keyword">function</span> (requie, exports, module) &#123;</div><div class="line"></div><div class="line">    //依赖可以就近书写</div><div class="line">    var a = require(<span class="string">'./a'</span>);</div><div class="line">    a.test();</div><div class="line"></div><div class="line">    ...</div><div class="line">    //软依赖</div><div class="line">    <span class="keyword">if</span> (status) &#123;</div><div class="line"></div><div class="line">        var b = requie(<span class="string">'./b'</span>);</div><div class="line">        b.test();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><blockquote><p>UMD是AMD和CommonJS的糅合</p></blockquote><p><em>AMD</em>模块以浏览器第一的原则发展，异步加载模块。<br><em>CommonJS</em>模块以服务器第一原则发展，选择同步加载，它的模块无需包装(unwrapped modules)。<br>这迫使人们又想出另一个更通用的模式<em>UMD</em>（Universal Module Definition）。希望解决跨平台的解决方案。</p><p>UMD先判断是否支持<em>Node.js</em>的模块（<em>exports</em>）是否存在，存在则使用Node.js模块模式。<br>在判断是否支持<em>AMD</em>（<em>define</em>是否存在），存在则使用<em>AMD</em>方式加载模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">function</span> (window, factory) &#123;</div><div class="line">    <span class="keyword">if</span> (typeof exports === <span class="string">'object'</span>) &#123;</div><div class="line"></div><div class="line">        module.exports = factory();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</div><div class="line"></div><div class="line">        define(factory);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        window.eventUtil = factory();</div><div class="line">    &#125;</div><div class="line">&#125;)(this, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    //module ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="AMD和RequireJS"><a href="#AMD和RequireJS" class="headerlink" title="AMD和RequireJS"></a>AMD和RequireJS</h2><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p><em>AMD是</em>“Asynchronous Module Definition”的缩写，意思就是”异步模块定义”.<br>AMD设计出一个简洁的写模块API：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure><ul><li>第一个参数 <em>id</em> 为字符串类型，表示了模块标识，为可选参数。若不存在则模块标识应该默认定义为在加载器中被请求脚本的标识。如果存在，那么模块标识必须为顶层的或者一个绝对的标识。</li><li>第二个参数，<em>dependencies</em> ，是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。</li><li>第三个参数，<em>factory</em>，是一个需要进行实例化的函数或者一个对象。</li></ul><p>通过参数的排列组合，这个简单的API可以从容应对各种各样的应用场景，如下所述。</p><h4 id="定义无依赖的模块"><a href="#定义无依赖的模块" class="headerlink" title="定义无依赖的模块"></a>定义无依赖的模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define( &#123;</div><div class="line">    add : <span class="keyword">function</span>( x, y )&#123;</div><div class="line">        <span class="built_in">return</span> x + y ;</div><div class="line">    &#125;</div><div class="line">&#125; );</div></pre></td></tr></table></figure><h4 id="定义有依赖的模块"><a href="#定义有依赖的模块" class="headerlink" title="定义有依赖的模块"></a>定义有依赖的模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define([<span class="string">"alpha"</span>], <span class="keyword">function</span>( alpha )&#123;</div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">        verb : <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            <span class="built_in">return</span> alpha.verb() + 1 ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="定义数据对象模块"><a href="#定义数据对象模块" class="headerlink" title="定义数据对象模块"></a>定义数据对象模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define(&#123;</div><div class="line">    users: [],</div><div class="line">    members: []</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="具名模块"><a href="#具名模块" class="headerlink" title="具名模块"></a>具名模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define(<span class="string">"alpha"</span>, [ <span class="string">"require"</span>, <span class="string">"exports"</span>, <span class="string">"beta"</span> ], <span class="keyword">function</span>( require, exports, beta )&#123;</div><div class="line">    export.verb = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> beta.verb();</div><div class="line">        // or:</div><div class="line">        <span class="built_in">return</span> require(<span class="string">"beta"</span>).verb();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="包装模块"><a href="#包装模块" class="headerlink" title="包装模块"></a>包装模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</div><div class="line">    var a = require(<span class="string">'a'</span>),</div><div class="line">          b = require(<span class="string">'b'</span>);</div><div class="line"></div><div class="line">    exports.action = <span class="function"><span class="title">function</span></span>() &#123;&#125;;</div><div class="line">&#125; );</div></pre></td></tr></table></figure><p><em>不考虑多了一层函数外，格式和Node.js是一样的：使用require获取依赖模块，使用exports导出API。</em></p><p>除了define外，AMD还保留一个关键字require。require 作为规范保留的全局标识符，可以实现为 module loader，也可以不实现。</p><h3 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">require([module], callback)</div></pre></td></tr></table></figure><blockquote><p>AMD模块化规范中使用全局或局部的require函数实现加载一个或多个模块，所有模块加载完成之后的回调函数。</p></blockquote><ul><li><em>module</em>：是一个数组，里面的成员就是要加载的模块；</li><li><em>callback</em>：是模块加载完成之后的回调函数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">require([<span class="string">'math'</span>], <span class="keyword">function</span>(math) &#123;</div><div class="line">　math.add(2, 3);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h2><blockquote><p>RequireJS 是一个前端的模块化管理的工具库，遵循AMD规范，它的作者就是AMD规范的创始人 James Burke。所以说RequireJS是对AMD规范的阐述一点也不为过。</p></blockquote><p>RequireJS 的基本思想为：通过一个函数来将所有所需要的或者说所依赖的模块实现装载进来，然后返回一个新的函数（模块），我们所有的关于新模块的业务代码都在这个函数内部操作，其内部也可无限制的使用已经加载进来的以来的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script data-main=<span class="string">'scripts/main'</span> src=<span class="string">'scripts/require.js'</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>那么scripts下的main.js则是指定的主代码脚本文件，所有的依赖模块代码文件都将从该文件开始异步加载进入执行。</p><p>define用于定义模块，RequireJS要求每个模块均放在独立的文件之中。按照是否有依赖其他模块的情况分为独立模块和非独立模块。</p><h4 id="独立模块，不依赖其他模块。"><a href="#独立模块，不依赖其他模块。" class="headerlink" title="独立模块，不依赖其他模块。"></a>独立模块，不依赖其他模块。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(&#123;</div><div class="line">    method1: <span class="function"><span class="title">function</span></span>()&#123;&#125;,</div><div class="line">    method2: <span class="function"><span class="title">function</span></span>()&#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">        method1: <span class="function"><span class="title">function</span></span>()&#123;&#125;,</div><div class="line">        method2: <span class="function"><span class="title">function</span></span>()&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="非独立模块，对其他模块有依赖。"><a href="#非独立模块，对其他模块有依赖。" class="headerlink" title="非独立模块，对其他模块有依赖。"></a>非独立模块，对其他模块有依赖。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([ <span class="string">'module1'</span>, <span class="string">'module2'</span> ], <span class="keyword">function</span>(m1, m2) &#123;</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="keyword">function</span>(require) &#123;</div><div class="line">    var m1 = require(<span class="string">'module1'</span>),</div><div class="line">          m2 = require(<span class="string">'module2'</span>);</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>简单看了一下RequireJS的实现方式，其 <em>require</em> 实现只不过是提取 <em>require</em> 之后的模块名，将其放入依赖关系之中。</p><p>在<em>require</em>进行调用模块时，其参数与<em>define</em>类似。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">require([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="keyword">function</span>(foo, bar) &#123;</div><div class="line">    foo.func();</div><div class="line">    bar.func();</div><div class="line">&#125; );</div></pre></td></tr></table></figure><p>在加载 foo 与 bar 两个模块之后执行回调函数实现具体过程。</p><p>当然还可以如之前的例子中的，在define定义模块内部进行require调用模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="keyword">function</span>(require) &#123;</div><div class="line">    var m1 = require( <span class="string">'module1'</span> ),</div><div class="line">          m2 = require( <span class="string">'module2'</span> );</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><em>define</em> 和 <em>require</em> 这两个定义模块，调用模块的方法合称为AMD模式，定义模块清晰，不会污染全局变量，清楚的显示依赖关系。<em>AMD</em>模式可以用于浏览器环境并且允许非同步加载模块，也可以按需动态加载模块。</p><blockquote><p>文章参考来源</p><footer><strong>@我是豆腐不是渣</strong><cite><a href="https://segmentfault.com/a/1190000004873947" target="_blank" rel="external">segmentfault.com/a/1190000004873947</a></cite></footer></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Javascript模块化&quot;&gt;&lt;a href=&quot;#Javascript模块化&quot; class=&quot;headerlink&quot; title=&quot;Javascript模块化&quot;&gt;&lt;/a&gt;Javascript模块化&lt;/h2&gt;&lt;p&gt;在了解这些规范之前，还是先了解一下什么是模块化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模块化是指在解决某一个复杂问题或者一系列的杂糅问题时，依照一种分类的思维把问题进行系统性的分解以之处理。模块化是一种处理复杂系统分解为代码结构更合理，可维护性更高的可管理的模块的方式。可以想象一个巨大的系统代码，被整合优化分割成逻辑性很强的模块时，对于软件是一种何等意义的存在。对于软件行业来说：解耦软件系统的复杂性，使得不管多么大的系统，也可以将管理，开发，维护变得“有理可循”。&lt;/p&gt;
&lt;p&gt;还有一些对于模块化一些专业的定义为：模块化是软件系统的属性，这个系统被分解为一组高内聚，低耦合的模块。那么在理想状态下我们只需要完成自己部分的核心业务逻辑代码，其他方面的依赖可以通过直接加载被人已经写好模块进行使用即可。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Web" scheme="yikewawa.gitbub.io/categories/Web/"/>
    
    
      <category term="AMD" scheme="yikewawa.gitbub.io/tags/AMD/"/>
    
      <category term="CMD" scheme="yikewawa.gitbub.io/tags/CMD/"/>
    
      <category term="CommonJS" scheme="yikewawa.gitbub.io/tags/CommonJS/"/>
    
  </entry>
  
  <entry>
    <title>JSON WEB TOKEN</title>
    <link href="yikewawa.gitbub.io/2016/10/31/JSON-WEB-TOKEN/"/>
    <id>yikewawa.gitbub.io/2016/10/31/JSON-WEB-TOKEN/</id>
    <published>2016-10-31T07:28:04.000Z</published>
    <updated>2019-03-21T04:41:52.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSONWebToken-API"><a href="#JSONWebToken-API" class="headerlink" title="JSONWebToken API"></a>JSONWebToken API</h2><p>An implementation of JSON Web Tokens.This was developed against draft-ietf-oauth-json-web-token-08. It makes use of <a href="https://github.com/xulayen/node-jsonwebtoken" target="_blank" rel="external">node-jws</a>.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install jsonwebtoken</div></pre></td></tr></table></figure><h3 id="版本迁移"><a href="#版本迁移" class="headerlink" title="版本迁移"></a>版本迁移</h3><a href="https://github.com/xulayen/node-jsonwebtoken/wiki/Migration-Notes:-v7-to-v8" target="_blank" rel="external">From v7 to v8</a><a id="more"></a><h3 id="用法API"><a href="#用法API" class="headerlink" title="用法API"></a>用法API</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jwt.sign(payload, secretOrPrivateKey, [options, callback])</div></pre></td></tr></table></figure><blockquote><p>(Asynchronous) If a callback is supplied, the callback is called with the err or the JWT.</p><p>(Synchronous) Returns the JsonWebToken as string</p><p>payload could be an object literal, buffer or string. Please note that exp is only set if the payload is an object literal.</p><p>secretOrPrivateKey is a string, buffer, or object containing either the secret for HMAC algorithms or the PEM encoded private key for RSA and ECDSA. In case of a private key with passphrase an object { key, passphrase } can be used (based on crypto documentation), in this case be sure you pass the algorithm option.</p><footer><strong>@Auth0</strong><cite><a href="https://github.com/xulayen/node-jsonwebtoken" target="_blank" rel="external">github.com/xulayen/node-jsonwebtoken</a></cite></footer></blockquote><ul><li>sign with default (HMAC SHA256)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// sign with default (HMAC SHA256)</div><div class="line">var jwt = require(<span class="string">'jsonwebtoken'</span>);</div><div class="line">var token = jwt.sign(&#123; foo: <span class="string">'bar'</span> &#125;, <span class="string">'secret'</span>);</div><div class="line">console.log(token)</div></pre></td></tr></table></figure><ul><li>sign with RSA SHA256</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// sign with RSA SHA256</div><div class="line">var cert = fs.readFileSync(<span class="string">'private.key'</span>);  // get private key</div><div class="line">var token = jwt.sign(&#123; foo: <span class="string">'bar'</span> &#125;, cert, &#123; algorithm: <span class="string">'RS256'</span>&#125;);</div><div class="line"></div><div class="line">// sign asynchronously</div><div class="line">jwt.sign(&#123; foo: <span class="string">'bar'</span> &#125;, cert, &#123; algorithm: <span class="string">'RS256'</span> &#125;, <span class="keyword">function</span>(err, token) &#123;</div><div class="line">  console.log(token);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="TOKEN失效"><a href="#TOKEN失效" class="headerlink" title="TOKEN失效"></a>TOKEN失效</h3><blockquote><p>The standard for JWT defines an exp claim for expiration. The expiration is represented as a NumericDate:<br>A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition “Seconds Since the Epoch”, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.<br>This means that the exp field should contain the number of seconds since the epoch.</p><footer><strong>@Auth0</strong><cite><a href="https://github.com/xulayen/node-jsonwebtoken" target="_blank" rel="external">github.com/xulayen/node-jsonwebtoken</a></cite></footer></blockquote><ul><li><p>产生一个token1小时后失效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jwt.sign(&#123;</div><div class="line">  exp: Math.floor(Date.now() / 1000) + (60 * 60),</div><div class="line">  data: <span class="string">'foobar'</span></div><div class="line">&#125;, <span class="string">'secret'</span>);</div></pre></td></tr></table></figure></li><li><p>另外一个方式产生token并且有失效机制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jwt.sign(&#123;</div><div class="line">  data: <span class="string">'foobar'</span></div><div class="line">&#125;, <span class="string">'secret'</span>, &#123; expiresIn: 60 * 60 &#125;);</div><div class="line"></div><div class="line">//or even better:</div><div class="line"></div><div class="line">jwt.sign(&#123;</div><div class="line">  data: <span class="string">'foobar'</span></div><div class="line">&#125;, <span class="string">'secret'</span>, &#123; expiresIn: <span class="string">'1h'</span> &#125;);</div></pre></td></tr></table></figure></li></ul><h3 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h3><p>token是一个JsonWebToken字符窜</p><blockquote><p>(Asynchronous) If a callback is supplied, function acts asynchronously. The callback is called with the decoded payload if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will be called with the error.</p><p>(Synchronous) If a callback is not supplied, function acts synchronously. Returns the payload decoded if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will throw the error.</p><footer><strong>@Auth0</strong><cite><a href="https://github.com/xulayen/node-jsonwebtoken" target="_blank" rel="external">github.com/xulayen/node-jsonwebtoken</a></cite></footer></blockquote><p><code>secretOrPublicKey</code>是一个字符窜或者<code>HMAC algorithms</code>缓冲区中的任何一个PEM编码了RSA和ECDSA的公钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//verify a token symmetric - synchronous</div><div class="line">var decoded = jwt.verify(token, <span class="string">'secret'</span>);</div><div class="line">console.log(decoded.foo) // bar</div><div class="line"></div><div class="line">// verify a token symmetric</div><div class="line">jwt.verify(token, <span class="string">'shhhhh'</span>, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  console.log(decoded.foo) // bar</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// invalid token - synchronous</div><div class="line">try &#123;</div><div class="line">  var decoded = jwt.verify(token, <span class="string">'wrong-secret'</span>);</div><div class="line">&#125; catch(err) &#123;</div><div class="line">  // err</div><div class="line">&#125;</div><div class="line"></div><div class="line">// invalid token</div><div class="line">jwt.verify(token, <span class="string">'wrong-secret'</span>, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  // err</div><div class="line">  // decoded undefined</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// verify a token asymmetric</div><div class="line">var cert = fs.readFileSync(<span class="string">'public.pem'</span>);  // get public key</div><div class="line">jwt.verify(token, cert, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  console.log(decoded.foo) // bar</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// verify audience</div><div class="line">var cert = fs.readFileSync(<span class="string">'public.pem'</span>);  // get public key</div><div class="line">jwt.verify(token, cert, &#123; audience: <span class="string">'urn:foo'</span> &#125;, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  // <span class="keyword">if</span> audience mismatch, err == invalid audience</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// verify issuer</div><div class="line">var cert = fs.readFileSync(<span class="string">'public.pem'</span>);  // get public key</div><div class="line">jwt.verify(token, cert, &#123; audience: <span class="string">'urn:foo'</span>, issuer: <span class="string">'urn:issuer'</span> &#125;, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  // <span class="keyword">if</span> issuer mismatch, err == invalid issuer</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// verify jwt id</div><div class="line">var cert = fs.readFileSync(<span class="string">'public.pem'</span>);  // get public key</div><div class="line">jwt.verify(token, cert, &#123; audience: <span class="string">'urn:foo'</span>, issuer: <span class="string">'urn:issuer'</span>, jwtid: <span class="string">'jwtid'</span> &#125;, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  // <span class="keyword">if</span> jwt id mismatch, err == invalid jwt id</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// verify subject</div><div class="line">var cert = fs.readFileSync(<span class="string">'public.pem'</span>);  // get public key</div><div class="line">jwt.verify(token, cert, &#123; audience: <span class="string">'urn:foo'</span>, issuer: <span class="string">'urn:issuer'</span>, jwtid: <span class="string">'jwtid'</span>, subject: <span class="string">'subject'</span> &#125;, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  // <span class="keyword">if</span> subject mismatch, err == invalid subject</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// alg mismatch</div><div class="line">var cert = fs.readFileSync(<span class="string">'public.pem'</span>); // get public key</div><div class="line">jwt.verify(token, cert, &#123; algorithms: [<span class="string">'RS256'</span>] &#125;, <span class="keyword">function</span> (err, payload) &#123;</div><div class="line">  // <span class="keyword">if</span> token alg != RS256,  err == invalid signature</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="解码token"><a href="#解码token" class="headerlink" title="解码token"></a>解码token</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jwt.decode(token [, options])</div></pre></td></tr></table></figure><ul><li><p>token is the JsonWebToken string</p></li><li><p>options:</p></li><li><p>json: force JSON.parse on the payload even if the header does not contain “typ”:”JWT”.</p></li><li>complete: return an object with the decoded payload and header.</li></ul><p>Example</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// get the decoded payload ignoring signature, no secretOrPrivateKey needed</div><div class="line">var decoded = jwt.decode(token);</div><div class="line"></div><div class="line">// get the decoded payload and header</div><div class="line">var decoded = jwt.decode(token, &#123;complete: <span class="literal">true</span>&#125;);</div><div class="line">console.log(decoded.header);</div><div class="line">console.log(decoded.payload)</div></pre></td></tr></table></figure><h3 id="token失效异常"><a href="#token失效异常" class="headerlink" title="token失效异常"></a>token失效异常</h3><h4 id="TokenExpiredError"><a href="#TokenExpiredError" class="headerlink" title="TokenExpiredError"></a>TokenExpiredError</h4><ul><li>Thrown error if the token is expired.</li><li>Error object:<ul><li>name: ‘TokenExpiredError’</li><li>message: ‘jwt expired’</li><li>expiredAt: [ExpDate]</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jwt.verify(token, <span class="string">'wrongsecret'</span>, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    /*</div><div class="line">      err = &#123;</div><div class="line">        name: <span class="string">'TokenExpiredError'</span>,</div><div class="line">        message: <span class="string">'jwt expired'</span>,</div><div class="line">        expiredAt: 1408621000</div><div class="line">      &#125;</div><div class="line">    */</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="JsonWebTokenError"><a href="#JsonWebTokenError" class="headerlink" title="JsonWebTokenError"></a>JsonWebTokenError</h4><ul><li>Error object:<ul><li>name: JsonWebTokenError</li><li>message:<ul><li>‘jwt malformed’</li><li>‘jwt signature is required’</li><li>‘invalid signature’</li><li>‘jwt audience invalid. expected: [OPTIONS AUDIENCE]’</li><li>‘jwt issuer invalid. expected: [OPTIONS ISSUER]’</li><li>‘jwt id invalid. expected: [OPTIONS JWT ID]’</li><li>‘jwt subject invalid. expected: [OPTIONS SUBJECT]’</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jwt.verify(token, <span class="string">'woringsecret'</span>, <span class="keyword">function</span>(err, decoded) &#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    /*</div><div class="line">      err = &#123;</div><div class="line">        name: <span class="string">'JsonWebTokenError'</span>,</div><div class="line">        message: <span class="string">'jwt malformed'</span></div><div class="line">      &#125;</div><div class="line">    */</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JSONWebToken-API&quot;&gt;&lt;a href=&quot;#JSONWebToken-API&quot; class=&quot;headerlink&quot; title=&quot;JSONWebToken API&quot;&gt;&lt;/a&gt;JSONWebToken API&lt;/h2&gt;&lt;p&gt;An implementation of JSON Web Tokens.This was developed against draft-ietf-oauth-json-web-token-08. It makes use of &lt;a href=&quot;https://github.com/xulayen/node-jsonwebtoken&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-jws&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install jsonwebtoken&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;版本迁移&quot;&gt;&lt;a href=&quot;#版本迁移&quot; class=&quot;headerlink&quot; title=&quot;版本迁移&quot;&gt;&lt;/a&gt;版本迁移&lt;/h3&gt;&lt;a href=&quot;https://github.com/xulayen/node-jsonwebtoken/wiki/Migration-Notes:-v7-to-v8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;From v7 to v8&lt;/a&gt;
    
    </summary>
    
      <category term="Web" scheme="yikewawa.gitbub.io/categories/Web/"/>
    
    
      <category term="Nodejs" scheme="yikewawa.gitbub.io/tags/Nodejs/"/>
    
      <category term="JWT" scheme="yikewawa.gitbub.io/tags/JWT/"/>
    
      <category term="Token" scheme="yikewawa.gitbub.io/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>nodejs搭建web服务</title>
    <link href="yikewawa.gitbub.io/2016/10/25/nodejs%E6%90%AD%E5%BB%BAweb%E6%9C%8D%E5%8A%A1/"/>
    <id>yikewawa.gitbub.io/2016/10/25/nodejs搭建web服务/</id>
    <published>2016-10-25T07:05:40.000Z</published>
    <updated>2019-03-21T04:41:52.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装、"><a href="#安装、" class="headerlink" title="安装、"></a>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs</a>、<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a></h2><p>安装成功之后，使用命令测试是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ node -v</div><div class="line"></div><div class="line">v6.10.2</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm -v</div><div class="line"></div><div class="line">5.3.0</div></pre></td></tr></table></figure><a id="more"></a><h2 id="初始化项目配置"><a href="#初始化项目配置" class="headerlink" title="初始化项目配置"></a>初始化项目配置</h2><p>在<code>chat</code>文件夹下执行初始化命令来获取package.json文件，如果你自己能记住也是可以手写的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm init</div><div class="line"></div><div class="line">package name: (20171022)</div><div class="line">version: (1.0.0)</div><div class="line">description:</div><div class="line">entry point: (index.js)</div><div class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</div><div class="line">git repository:</div><div class="line">keywords:</div><div class="line">author:</div><div class="line">license: (ISC)</div><div class="line">About to write to C:\Users\Administrator\Desktop\20171022\package.json:</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"20171022"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="web服务需要引用的模块"><a href="#web服务需要引用的模块" class="headerlink" title="web服务需要引用的模块"></a>web服务需要引用的模块</h2><h3 id="http模块-http协议"><a href="#http模块-http协议" class="headerlink" title="http模块(http协议)"></a>http模块(http协议)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install http --save-dev</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'http'</span>);</div></pre></td></tr></table></figure><blockquote><p>Node中提供了http模块，其中封装了高效的http服务器和http客户端<br>http.server是一个基于事件的HTTP服务器，内部是由c++实现的，接口由JavaScript封装<br>http.request是一个HTTP客户端工具。用户向服务器发送数据。</p><footer><strong>@Helios_nannan</strong><cite><a href="http://blog.csdn.net/woshinannan741/article/details/51357464" target="_blank" rel="external">blog.csdn.net/woshinannan741/article/details/51357464</a></cite></footer></blockquote><h3 id="url模块-url解析"><a href="#url模块-url解析" class="headerlink" title="url模块(url解析)"></a>url模块(url解析)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install url --save-dev</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div></pre></td></tr></table></figure><blockquote><p>This module has utilities for URL resolution and parsing meant to have feature parity with node.js core url module.</p><footer><strong>@npm</strong><cite><a href="https://www.npmjs.com/package/url" target="_blank" rel="external">www.npmjs.com/package/url</a></cite></footer></blockquote><h3 id="fs模块-文件系统"><a href="#fs模块-文件系统" class="headerlink" title="fs模块(文件系统)"></a>fs模块(文件系统)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install fs --save-dev</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div></pre></td></tr></table></figure><blockquote><p>Node.js 文件系统封装在 fs 模块是中，它提供了文件的读取、写入、更名、删除、遍历目录、链接等POSIX 文件系统操作。</p><p>与其他模块不同的是，fs 模块中所有的操作都提供了异步的和 同步的两个版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。我们以几个函数为代表，介绍 fs 常用的功能，并列出 fs 所有函数 的定义和功能。</p><footer><strong>@平凡</strong><cite><a href="http://www.cnblogs.com/pingfan1990/p/4707317.html" target="_blank" rel="external">www.cnblogs.com/pingfan1990/p/4707317.html</a></cite></footer></blockquote><h3 id="path模块-路径解析"><a href="#path模块-路径解析" class="headerlink" title="path模块(路径解析)"></a>path模块(路径解析)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install path --save-dev</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div></pre></td></tr></table></figure><blockquote><p>This is an exact copy of the NodeJS ’path’ module published to the NPM registry.</p><footer><strong>@npm</strong><cite><a href="https://www.npmjs.com/package/path" target="_blank" rel="external">www.npmjs.com/package/path</a></cite></footer></blockquote><h2 id="构建一个基于nodejs的web服务器"><a href="#构建一个基于nodejs的web服务器" class="headerlink" title="构建一个基于nodejs的web服务器"></a>构建一个基于nodejs的web服务器</h2><p>新建一个<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">Hello World!</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>新建一个<code>webserver.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建服务器</span></div><div class="line">http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">   <span class="comment">// 解析请求，包括文件名</span></div><div class="line">   <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line"></div><div class="line">   <span class="comment">// 输出请求的文件名</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">   <span class="comment">// 从文件系统中读取请求的文件内容</span></div><div class="line">   fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">         <span class="built_in">console</span>.log(err);</div><div class="line">         <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></div><div class="line">         <span class="comment">// Content Type: text/plain</span></div><div class="line">         response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">         <span class="comment">// HTTP 状态码: 200 : OK</span></div><div class="line">         <span class="comment">// Content Type: text/plain</span></div><div class="line">         response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line"></div><div class="line">         <span class="comment">// 响应文件内容</span></div><div class="line">         response.write(data.toString());</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//  发送响应数据</span></div><div class="line">      response.end();</div><div class="line">   &#125;);</div><div class="line">&#125;).listen(<span class="number">8081</span>);</div><div class="line"></div><div class="line"><span class="comment">// 控制台会输出以下信息</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8081/'</span>);</div></pre></td></tr></table></figure><p>安装用到的模块到本地项目中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install path --save-dev</div><div class="line"></div><div class="line">$ npm install fs --save-dev</div><div class="line"></div><div class="line">$ npm install http --save-dev</div><div class="line"></div><div class="line">$ npm install url --save-dev</div></pre></td></tr></table></figure><p>安装成功之后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ node webserver</div></pre></td></tr></table></figure><p>在浏览器起中打开：<a href="http://127.0.0.1:8081/" target="_blank" rel="external">http://127.0.0.1:8081/</a> 即可查看效果：</p><img src="/img/nodejs搭建web服务/001.png"><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><blockquote><p>Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.</p><footer><strong>@express</strong><cite><a href="http://expressjs.com/" target="_blank" rel="external">expressjs.com</a></cite></footer></blockquote><p>express API地址：<a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="external">http://www.expressjs.com.cn/4x/api.html</a></p><p>创建一个文件夹<code>express+nodejs</code>，执行初始化项目操作，在项目上安装<code>express</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm install express --save</div></pre></td></tr></table></figure><p>并且新建<code>index.js</code>、<code>index.html</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.send(<span class="string">'hello world2'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">Hello World!</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>在命令行中执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ node index</div></pre></td></tr></table></figure></p><p>如果提示<code>listen EADDRINUSE :::3000</code>就说明端口被占用了，可以换成其他端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Error: listen EADDRINUSE :::3000</div><div class="line">    at Object.exports._errnoException (util.js:1018:11)</div><div class="line">    at exports._exceptionWithHostPort (util.js:1041:20)</div><div class="line">    at Server._listen2 (net.js:1262:14)</div><div class="line">    at listen (net.js:1298:10)</div><div class="line">    at Server.listen (net.js:1394:5)</div><div class="line">    at EventEmitter.listen (E:\工作\workpace\Express\node_modules\express\lib\application.js:618:24)</div><div class="line">    at Object.&lt;anonymous&gt; (E:\工作\workpace\Express\index.js:8:5)</div><div class="line">    at Module._compile (module.js:570:32)</div><div class="line">    at Object.Module._extensions..js (module.js:579:10)</div><div class="line">    at Module.load (module.js:487:32)</div></pre></td></tr></table></figure><p>在浏览器中打开 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a></p><img src="/img/nodejs搭建web服务/002.png"><h3 id="使用Express加载模版并输出数据"><a href="#使用Express加载模版并输出数据" class="headerlink" title="使用Express加载模版并输出数据"></a>使用Express加载模版并输出数据</h3><p>未完待续……</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装、&quot;&gt;&lt;a href=&quot;#安装、&quot; class=&quot;headerlink&quot; title=&quot;安装、&quot;&gt;&lt;/a&gt;安装&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;安装成功之后，使用命令测试是否成功：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ node -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;v6.10.2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.3.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="yikewawa.gitbub.io/categories/Web/"/>
    
    
      <category term="Nodejs" scheme="yikewawa.gitbub.io/tags/Nodejs/"/>
    
      <category term="Express" scheme="yikewawa.gitbub.io/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>一行代码搭建Hexo站点</title>
    <link href="yikewawa.gitbub.io/2016/10/23/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BAHexo%E7%AB%99%E7%82%B9/"/>
    <id>yikewawa.gitbub.io/2016/10/23/一行代码搭建Hexo站点/</id>
    <published>2016-10-23T07:02:14.000Z</published>
    <updated>2019-03-21T04:41:52.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化Hexo模版引擎"><a href="#初始化Hexo模版引擎" class="headerlink" title="初始化Hexo模版引擎"></a>初始化Hexo模版引擎</h2>一行代码快速搭建Hexo.NexT主题网站，来吧，趁热打铁一起快速进入学习吧！<h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><p>进入本机E盘Blog目录下</p><ul><li>第一步，安装下载<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>模版，即初始化<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>模版</li><li>第二步，进入blog文件夹，执行安装依赖包</li><li>第三步，启动<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>服务</li><li>第四步，打开控制台给出的http地址，<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line"></div><div class="line">hexo init blog</div><div class="line"></div><div class="line">cd blog</div><div class="line"></div><div class="line">npm install</div><div class="line"></div><div class="line">hexo server</div><div class="line"></div></pre></td></tr></table></figure><p>如果你没有安装npm，请先执行下载<a href="https://www.npmjs.com/" target="_blank" rel="external">安装</a></p><p>安装成功执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm -v</div><div class="line"></div></pre></td></tr></table></figure><p>执行以上步骤之后在浏览器中键入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可看到一个初始状态的模版</p><img src="/img/一行代码搭建hexo站点/01.jpg"><h3 id="修改测试端口号"><a href="#修改测试端口号" class="headerlink" title="修改测试端口号"></a>修改测试端口号</h3><p>如果需要修改端口4000，可以在node-modules文件夹下找到hexo-server模块中的index.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/* global hexo */</div><div class="line"></div><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var assign = require(&apos;object-assign&apos;);</div><div class="line"></div><div class="line">hexo.config.server = assign(&#123;</div><div class="line">  port: 5000,//自行修改端口号</div><div class="line">  log: false,</div><div class="line">  ip: &apos;0.0.0.0&apos;,</div><div class="line">  compress: false,</div><div class="line">  header: true</div><div class="line">&#125;, hexo.config.server);</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><p>修改之后重新执行hexo server即可:</p><img src="/img/一行代码搭建hexo站点/02.jpg"><h2 id="网站基础配置"><a href="#网站基础配置" class="headerlink" title="网站基础配置"></a>网站基础配置</h2><h3 id="显示或隐藏Menu菜单"><a href="#显示或隐藏Menu菜单" class="headerlink" title="显示或隐藏Menu菜单"></a>显示或隐藏Menu菜单</h3><p>在修改菜单之前你首先要弄清楚当前网站使用的皮肤是哪一个，打开网站根目录 <code>config_yml</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line">theme: landscape</div></pre></td></tr></table></figure></p><p>其中<code>landscape</code>就是你的皮肤框架</p><p>然后在网站根目录找到<code>themes/landscape</code>这里面就会有你菜单想的配置，同时这里面也有一个 <code>config_yml</code>，为了区分，我们索性把站点下的配置文件称为<code>站点配置yml</code>，皮肤框架下的配置文件称之为<code>皮肤配置yml</code></p><p>OK，打开<code>皮肤配置yml</code>你会看到一些简短的配置，其中第一条就是我们的菜单栏配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Header</span></div><div class="line">menu:</div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div></pre></td></tr></table></figure><p>修改<code>Home</code>为<code>主菜单</code>，修改<code>Archives</code>为 <code>文章</code>，刷新浏览器<a href="http://localhost:5000" target="_blank" rel="external">http://localhost:5000</a> 即可看到效果</p><h3 id="配置站点基础信息"><a href="#配置站点基础信息" class="headerlink" title="配置站点基础信息"></a>配置站点基础信息</h3><p>打开<code>站点配置yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line">title: 标题</div><div class="line">subtitle: 副标题</div><div class="line">description: 描述</div><div class="line">author: 作者</div><div class="line">language: zh-Hans</div><div class="line">timezone:</div></pre></td></tr></table></figure><p>刷新浏览器 <a href="http://localhost:5000" target="_blank" rel="external">http://localhost:5000</a><br><img src="/img/一行代码搭建hexo站点/03.jpg"></p><h3 id="设置rss"><a href="#设置rss" class="headerlink" title="设置rss"></a>设置rss</h3><p>在站点根目录执行安装hexo-generator-feed</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install hexo-generator-feed  --save-dev</div></pre></td></tr></table></figure><p>在<code>站点配置yml</code>中配置插件，为了快速的找到配置项，可以放到文件的结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">plugins: hexo-generator-feed</div><div class="line"></div><div class="line">feed:</div><div class="line">  <span class="built_in">type</span>: atom <span class="comment">##feed类型 atom或者rss2</span></div><div class="line">  path: atom.xml <span class="comment">##feed路径</span></div><div class="line">  <span class="built_in">limit</span>: 20  <span class="comment">##feed文章最小数量</span></div></pre></td></tr></table></figure><p>点击RSS按钮，会出现如下提示，前提是你的浏览器有rss功能，我本地使用的是<code>rss feed reader</code>：</p><img src="/img/一行代码搭建hexo站点/04.jpg"><h3 id="设置本地全局搜索"><a href="#设置本地全局搜索" class="headerlink" title="设置本地全局搜索"></a>设置本地全局搜索</h3><p>安装下载hexo-generator-searchdb模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install hexo-generator-searchdb --save-dev</div></pre></td></tr></table></figure></p><p><code>站点配置yml</code>需要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  <span class="built_in">limit</span>: 10000</div></pre></td></tr></table></figure><p><code>皮肤配置yml</code>需要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">local_search:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div></pre></td></tr></table></figure><p>当然你会发现并没有起作用，这是因为当前<code>landscape</code>并不支持本地搜索，后续将介绍<code>NexT</code>主题</p><h3 id="使用命令生成静态文件"><a href="#使用命令生成静态文件" class="headerlink" title="使用命令生成静态文件"></a>使用命令生成静态文件</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。生成的文件在网站<code>public</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate --deploy</div><div class="line">hexo deploy --generate</div></pre></td></tr></table></figure><p>可缩写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g -d</div><div class="line">hexo d -g</div></pre></td></tr></table></figure><h2 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h2><h3 id="下载安装NexT模版"><a href="#下载安装NexT模版" class="headerlink" title="下载安装NexT模版"></a>下载安装NexT模版</h3><p>在github上<a href="https://github.com/xulayen/hexo-theme-next" target="_blank" rel="external">下载</a>NexT主题源码</p><p>把<code>NexT</code>主题源码的源码整个复制到你的站点目录下的<code>themes/next</code>目录下</p><h3 id="修改站点配置yml来更改主题"><a href="#修改站点配置yml来更改主题" class="headerlink" title="修改站点配置yml来更改主题"></a>修改<code>站点配置yml</code>来更改主题</h3><p>文章上面有讲到，当前我们的主题使用的是<code>landscape</code>需要修改为<code>next</code></p><p>重新启动服务</p><p>刷新页面查看效果</p><img src="/img/一行代码搭建hexo站点/05.png"><h3 id="学习并使用NexT主题配置"><a href="#学习并使用NexT主题配置" class="headerlink" title="学习并使用NexT主题配置"></a>学习并使用NexT主题配置</h3><p>打开<code>next</code>的<code>皮肤配置yml</code>，你会看到很多我们不明白的配置项，根据注释可以读出其中配置的含义。</p><h4 id="根据语言配置菜单栏语言"><a href="#根据语言配置菜单栏语言" class="headerlink" title="根据语言配置菜单栏语言"></a>根据语言配置菜单栏语言</h4><p>打开<code>next皮肤配置yml</code>文件，找到<code>languages</code>文件夹</p><img src="/img/一行代码搭建hexo站点/06.png"><p>点开<code>zh-Hans.yml</code>其中的配置项就是已经翻译的文本，网站会根据你<code>站点配置yml</code>中的语言配置来去读取对应的语言文件</p><p>打开你<code>next皮肤配置yml</code>你会看到菜单栏基础配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">menu:</div><div class="line">  home: <span class="regexp">/ || home</span></div><div class="line"><span class="regexp">  #about: /</span>about/ || user</div><div class="line">  #tags: /tags/ || tags</div><div class="line">  #categories: /categories/ || th</div><div class="line">  archives: <span class="regexp">/archives/</span> || archive</div><div class="line">  #schedule: /schedule/ || calendar</div><div class="line">  #sitemap: /sitemap.xml || sitemap</div><div class="line">  #commonweal: /404/ || heartbeat</div></pre></td></tr></table></figure><p>发现<code>home</code>和<code>archives</code>菜单是开启的，现在我们全部开启，只需要去掉前面的<code>#</code>，刷新浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">menu:</div><div class="line">  home: <span class="regexp">/ || home</span></div><div class="line"><span class="regexp">  about: /</span>about/ || user</div><div class="line">  tags: <span class="regexp">/tags/</span> || tags</div><div class="line">  categories: <span class="regexp">/categories/</span> || th</div><div class="line">  archives: <span class="regexp">/archives/</span> || archive</div><div class="line">  schedule: <span class="regexp">/schedule/</span> || calendar</div><div class="line">  sitemap: <span class="regexp">/sitemap.xml || sitemap</span></div><div class="line"><span class="regexp">  commonweal: /</span><span class="number">404</span>/ || heartbeat</div></pre></td></tr></table></figure><p>尝试修改<code>站点配置yml</code>语言，重启服务后刷新浏览器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">language: zh-tw</div></pre></td></tr></table></figure><img src="/img/一行代码搭建hexo站点/07.jpg"><h4 id="配置站内搜索"><a href="#配置站内搜索" class="headerlink" title="配置站内搜索"></a>配置站内搜索</h4><p>安装下载hexo-generator-searchdb模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install hexo-generator-searchdb --save-dev</div></pre></td></tr></table></figure></p><p><code>站点配置yml</code>需要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  <span class="built_in">limit</span>: 10000</div></pre></td></tr></table></figure><p><code>皮肤配置yml</code>需要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">local_search:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div></pre></td></tr></table></figure><h4 id="配置rss"><a href="#配置rss" class="headerlink" title="配置rss"></a>配置rss</h4><p>配置同见 2.3. 设置rss</p><h4 id="配置标签-tags"><a href="#配置标签-tags" class="headerlink" title="配置标签(tags)"></a>配置标签(tags)</h4><p>添加标签其实就是在你的<code>source</code>文件夹下新建一个page页面而已，比如菜单上的<code>tags</code>和<code>about</code>或者<code>categories</code>都是一样的，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">hexo new page <span class="string">"tags"</span></div></pre></td></tr></table></figure><p>会在<code>source</code>目录下生成一个对应的文件夹，其中有<code>index.md</code>文件，打开会看到一些基础配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2017-10-24 12:02:51</div><div class="line">---</div></pre></td></tr></table></figure><h4 id="配置分类-categories"><a href="#配置分类-categories" class="headerlink" title="配置分类(categories)"></a>配置分类(categories)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">hexo new page <span class="string">"categories"</span></div></pre></td></tr></table></figure><p>会在<code>source</code>目录下生成一个对应的文件夹，其中有<code>index.md</code>文件，打开会看到一些基础配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: categories</div><div class="line">date: 2017-10-24 12:02:51</div><div class="line">---</div></pre></td></tr></table></figure><h4 id="配置站点基础信息-1"><a href="#配置站点基础信息-1" class="headerlink" title="配置站点基础信息"></a>配置站点基础信息</h4><h5 id="配置头像"><a href="#配置头像" class="headerlink" title="配置头像"></a>配置头像</h5><p>在<code>next皮肤配置yml</code>中可以配置远程地址，也可以是本地资源地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Sidebar Avatar</span></div><div class="line"><span class="comment"># in theme directory(source/images): /images/avatar.gif</span></div><div class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></div><div class="line">avatar: 头像地址</div></pre></td></tr></table></figure><h5 id="配置站点描述"><a href="#配置站点描述" class="headerlink" title="配置站点描述"></a>配置站点描述</h5><p>在<code>站点配置yml</code>文件中，找到<code>menu/description</code>就是当前站点的描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">description: 站点描述</div></pre></td></tr></table></figure><h5 id="配置第三方跳转链接"><a href="#配置第三方跳转链接" class="headerlink" title="配置第三方跳转链接"></a>配置第三方跳转链接</h5><p>在<code>next皮肤配置yml</code>中，找到<code>social</code>配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">social:</div><div class="line">  GitHub: https://github.com/yourname || github</div><div class="line">  E-Mail: mailto:yourname@163.com || envelope</div><div class="line">  QQ: http://wpa.qq.com/msgrd?v=3&amp;uin=yourqq&amp;site=在线客服&amp;menu=yes || qq</div><div class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></div><div class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></div><div class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></div><div class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></div><div class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></div><div class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></div><div class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></div><div class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></div></pre></td></tr></table></figure><h5 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h5><p>在<code>next皮肤配置yml</code>中，找到<code>links</code>配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">links_icon: link</div><div class="line">links_title: Links</div><div class="line">links_layout: inline</div><div class="line">links:</div><div class="line">  friend1:</div><div class="line">  friend2:</div><div class="line">  friend3:</div></pre></td></tr></table></figure><h4 id="配置阅读次数（使用第三方服务）"><a href="#配置阅读次数（使用第三方服务）" class="headerlink" title="配置阅读次数（使用第三方服务）"></a>配置阅读次数（使用第三方服务）</h4><p><code>leancloud</code>作为装逼神器确实不错，可以随意修改当前文章的阅读次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Show number of visitors to each article.</span></div><div class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></div><div class="line"><span class="comment"># 使用第三方服务 LeanCloud 查看文章阅读量</span></div><div class="line">leancloud_visitors:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  app_id:</div><div class="line">  app_key:</div></pre></td></tr></table></figure><h4 id="配置评论（使用第三方服务）"><a href="#配置评论（使用第三方服务）" class="headerlink" title="配置评论（使用第三方服务）"></a>配置评论（使用第三方服务）</h4><p>在disqus官网 <a href="http://www.disqus.com" target="_blank" rel="external">http://www.disqus.com</a> 注册一个帐号添加应用之后可获得一个名称，作为你的shortname</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Disqus</span></div><div class="line">disqus:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  shortname: 你的名称</div><div class="line">  count: <span class="literal">true</span></div></pre></td></tr></table></figure><h4 id="配置站点统计（使用第三方服务）"><a href="#配置站点统计（使用第三方服务）" class="headerlink" title="配置站点统计（使用第三方服务）"></a>配置站点统计（使用第三方服务）</h4><p>百度站点统计 <a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">http://tongji.baidu.com/web/welcome/login</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Baidu Analytics ID</span></div><div class="line"><span class="comment"># 注意： baidu_analytics 不是你的百度 id 或者 百度统计 id</span></div><div class="line">baidu_analytics: 327573ae29bff3e49a0152fd0be5e1c2</div></pre></td></tr></table></figure><h4 id="当前文章是否启用评论配置"><a href="#当前文章是否启用评论配置" class="headerlink" title="当前文章是否启用评论配置"></a>当前文章是否启用评论配置</h4><p>如果不需要当前页面或这文章不启用评论，则只需要添加以下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">---</div><div class="line">title: tags</div><div class="line">date: <span class="number">2017</span><span class="number">-10</span><span class="number">-24</span> <span class="number">12</span>:<span class="number">02</span>:<span class="number">51</span></div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><h4 id="在每个文章的最后加上版权声明"><a href="#在每个文章的最后加上版权声明" class="headerlink" title="在每个文章的最后加上版权声明"></a>在每个文章的最后加上版权声明</h4><ul><li>新建 passage-end-tag.swig 文件</li></ul><p>在路径 <code>\themes\next\layout\_macro</code>中添加<code>passage-end-tag.swig</code>文件，其内容可以自定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;% <span class="keyword">if</span> theme.passage_end_tag.enabled %&#125;</div><div class="line">&lt;div&gt;</div><div class="line">&lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</div><div class="line">------ 本文结束 ------&lt;/div&gt;</div><div class="line">&lt;br/&gt;</div><div class="line"></div><div class="line">&lt;ul class=<span class="string">"post-copyright"</span> style=<span class="string">"margin: 2em 0 0; padding: 0.5em 1em;border-left: 3px solid #ff1700;background-color: #f9f9f9;list-style: none; "</span>&gt;</div><div class="line">  &lt;li class=<span class="string">"post-copyright-author"</span>&gt;</div><div class="line">    &lt;strong&gt;本文作者：&lt;/strong&gt;</div><div class="line">    Xu Layen</div><div class="line">  &lt;/li&gt;</div><div class="line">  &lt;li class=<span class="string">"post-copyright-license"</span>&gt;</div><div class="line">    &lt;strong&gt;版权声明： &lt;/strong&gt;</div><div class="line">    本博客所有文章除特别声明外，转载请注明出处！</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><ul><li>修改 post.swig 文件<br>在<code>\themes\next\layout\_macro\post.swig</code>中，<code>post-body</code>之后，<code>post-footer</code>之前添:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;% <span class="keyword">if</span> not is_index %&#125;</div><div class="line">  &#123;% include <span class="string">'passage-end-tag.swig'</span> %&#125;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><ul><li>在<code>next主题配置yml</code>中添加字段</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></div><div class="line">passage_end_tag:</div><div class="line">  enabled: <span class="literal">true</span></div></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>跟着我的步骤可以很快的搭建一个属于自己的博客站点，当然<code>hexo.next</code>远远不知这些配置项，有兴趣的同学可以自己看看里面的配置。<br>这篇文章为什么叫一行代码搭建hexo博客呢，啊哈哈哈，不这样也不会有人看哇，懂hexo的人就不用看了，高手勿喷~另外可以使用翻墙软件在下方评论，写下你想说的话，没有翻墙的，可以直接在<code>站点概述</code>中qq我或者e-mail我都可以。<br>祝，早新手早日玩转hexo博客，这是 <a href="http://blog.xulayen.com/" target="_blank" rel="external">博主</a> 的博客，文章不定期更新</p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT官网地址</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始化Hexo模版引擎&quot;&gt;&lt;a href=&quot;#初始化Hexo模版引擎&quot; class=&quot;headerlink&quot; title=&quot;初始化Hexo模版引擎&quot;&gt;&lt;/a&gt;初始化Hexo模版引擎&lt;/h2&gt;
一行代码快速搭建Hexo.NexT主题网站，来吧，趁热打铁一起快速进入学习吧！

&lt;h3 id=&quot;执行安装&quot;&gt;&lt;a href=&quot;#执行安装&quot; class=&quot;headerlink&quot; title=&quot;执行安装&quot;&gt;&lt;/a&gt;执行安装&lt;/h3&gt;&lt;p&gt;进入本机E盘Blog目录下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，安装下载&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;模版，即初始化&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;模版&lt;/li&gt;
&lt;li&gt;第二步，进入blog文件夹，执行安装依赖包&lt;/li&gt;
&lt;li&gt;第三步，启动&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;服务&lt;/li&gt;
&lt;li&gt;第四步，打开控制台给出的http地址，&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="yikewawa.gitbub.io/categories/Web/"/>
    
    
      <category term="Hexo" scheme="yikewawa.gitbub.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="yikewawa.gitbub.io/tags/NexT/"/>
    
  </entry>
  
</feed>
